{
  "name": "FlashLoan",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "flash_loan",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "pair",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+3dB5gcR5UH8B2tUu8orLSrlTbPBuU0s8p5LTlJjnKUo6y0tmxJK1sry3LOOedskbMxxubgMIfP5uAwZ8A+OMwBNgeHOXwYzGEDJt6rnnrWX+X2fFvoFcx4X3/f+6b79XTVr6q6e3q6Z6VdZWVlqbL8VE5RVfb2idd32tfs3k25lFxZ2ZDOfiXiLC8RZ/8ScQ4oEefAEnEOKhHn4BJxRiXirCgRZ7pEnENKxDm0RJzDSsQ5vESclSXiHFEizpEl4qwSdNaCs9q+jrKvNfZ1tH0dY195mzr7Wm/b2N8uN1A0UjRRNNt13CEZihaKVoo2inaKsRTjKMZTTKCYSDGJYjLFFIqpFNMopttychQdFDMoZlLMophNMYdiLsU8ivkUCygWUiyiWEyxxPbbPhRLKZZR7EuxH8X+FAdQHEixnGIFxUEUB1McQnEoxWG2LRnblsMpVlIcQXEkxVEUR1McQ3EsxSqK4yiOpziB4kSKkyhOplhNcQrFGoq1FOso1lNsoOiiOJXiNIqNFKdTnEGxiWIzxRaKbqfPt1KcSXEWxTa7rtKu66HYTnE2xQ6Kcyh2UpxLcR7F+RQXUFxIcRHFxRSXUFxKcZlT1uUUV1BcSXEVxdUU11BcS3EdxfUUN1DcSHETxc0Ut1DcSnGbLaufLet2ijuc3J0Ud9n5u+3rPfb1Xvt6n329374+YF8ftK8P2dddFB0V+XlzDed+1zY53udTkOP9vx/k+FgohxwfF/0hx8fIAMjx8TIQcnzsDIJcvZ0fDLkGmOfXRjtfAbkmO5+GXLOdHwK5jJ0fCrkWOz8Mcq12fjjk2ux8JeTa7fwIyI218yPtK7fbTJ32NbuXkylT+LyaNXYe8ypoD495NeR4zEdBjse8BnLc9tGQ4zEfAzke81rI8ZjXQY7HvB5yPOa4r/CYN0KOx7wJcjzmzZDjMc9Ajse8BXI85q2Q4zFvgxz3ZTvkuC95XzF9twzW84THIN434xyvx2OwHMrkHK/HY5DX4zHI6/EYxPX8yuvxGOT1eLzxejy2eLzwOOJtRkKOxwv3Oy4H9zEeL9yfuGzcd3i8cN/h+nDf4fHCfYcNuO/wvo/7DrsykON9H/cdtvK+Y9pl+p73/077mt27KYd18ZRyljthHs/V9bKWGXje742lHiwNwv2Shn5pgHqahOvBz6vetLkJLM3CFlNmRrbM+LK2BfzcVq4nDeuroW0twm3D61Iul5dbwFLnOPGaoK4IfJzD80xLgq9V1teRKttzHDthuRV8nGsGS0bYEjkWMxU6ZjJgaRe15LJ4LdgbSztY2kQt+eN3rGyZ8XXkOOEyTRnjoU+4/9iehvXjoL/GC/dXCurkcnkZfWpVq1rVqla1qlWtau3bVvyeg/f2+H0tReDjXBtYpL8b4D0uLtvcR3wY6pS9R5HL4vdk/m7p3mcrh/dURrtdj9pcRdnbv1vjMwIcv0ZRf378uB4ul5fxuQW3Be/3SN97SkE9XO67t96OdfL3CXNZc1/a3OvO2PIanHbgfaQaJ2f2ySehvcVybxfvffYDn/D93txfe78X79OVg0/6WMXni73xNYKPt8PnKtL3a/Gc1RtfM/h4uwHgk76nifdOe+NLus85EF6l75f53rtrAx9vNwh8wp+vOXx+3BsfXivxdoPBJ30tYnzjPHx4fcLbReCbGMA3wcM3EXy8XQX4JgfwTfLwTQbfJJhn39QAvikevqlg4u2GgG96AN80D9908PF2Q8GXC+DLlvXelwMfbzcMfDMC+Do8fDPAx9sNB9+sAL6ZHr5Z4OPtKsE3J4BvtodvDvh4uxHgmxfAN9fDNw98vB3+RmlBAN98D98C8PF2VeBbFMC30MO3CHy8XQ34lsj64uegiz18S8CyT4C+6vSw7AOWZQH6ZamHZRlY9he1zIjvkezrYdkfLPuJWvLPhw+QLTN+PnygcJmmjOXQJ9x/bE/D+gOhv5YL91cK6uRyeRl9alWrWtWqVrWqVa1qVata1apWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqVd5qLEsdZwTvW1oEPs7tF9ASORYzFfrtSZIPx/IgWV/8O50VHr6DwHKoqKUj/p3OwR6WQ8FyiKgl/zudw2TLjH9Tczj4ua1cTxrW45gfLty2FNTJ5fIy+tSqVrWqVa1qVata1apWtapVrWpVq1rVqla1qrVUrMaywnFG8L4VReDj3CEBLZFjMVOh++xJPhzLI2R98TOJlR6+I8BytKxlprEc6WE5GixHyVriZxLHyJaZNWUcC35uK9eThvU45scKty0FdXK5vIw+tfZtq7GsdJwRvG9lEfg4d1RAS+RYzFTovJTkw7E8TtYXn8NXefiOA8uJopb8/w9wvIflRLCcIGrJn8NPki0zPoefDH5uK9eThvU45icLty0FdXK5vIw+tapVrWpVq1rVqla19m2rsaxynBG8b1UR+Dh3QkBL5FjMVOh7SpIPx/IUWV/8nW61h+8UsKwTteS/063xsKwDy1pRS/473XrZMuPvdBvAz23letKwHsd8g3DbUlAnl8vL6FOrWtWqVrWqVa1qVWvfthrLascZwftWF4GPc2sDWiLHYqZC31OSfDiWp8r64u90XR6+U8FyegDLaR6W08GyUdYSf6c7Q7bM+DvdJvBzW7meNKzHMd8k3LYU1Mnl8jL6SsVqLF2OM4L3dRWBj3MbA1oix2KmQsdPkg/HcousLz6+N3v4toDlzACWbg/LmWDZKmuJzzVnyZYZn2u2gZ/byvWkYT2O+TbhtqWgTi6Xl9FXKlZj2ew4I3jf5iLwcW5rQEvkWMxU6PhJ8uFYbg/g6/HwbQdfT4JvRwDf2R6+HeDj7SLw7QzgO8fDtxN8vB3+v33nBfCd6+E7D3znwjz7LgjgO9/DdwGYeLsh4LsogO9CD99F4OPt8P/tuySA72IP3yXg4+3w/+27LIDvUg/fZeDj7YaD74oAvss9fFeAj7fD899VAXxXeviuAt+VCb5rAviu9vBdA76rE3zXBfBd6+G7DnzXJvhuCOC73sN3A/iuT/DdFMB3o4fvJrDcLGvJpsFyM9Rza4A231LW+zZz/WnYDn23B/Dd5uG7HXy3JfjuDOC7w8N3J/h4O9yn7w7gu8vDdzf47krw3RvAd4+H717w3ZPguz+A7z4P3/3guy/B92AA3wMevgfB90CCb1cA30Mevl3geyjB994Avvd4+N4Lvvck+N4fwPc+D9/7wfe+BN8HA/g+4OH7IPg+kOD7cADfhzx8HwbfhxJ8Hw3g+4iH76Pg+0iC7+MBfB/z8H0cfB9L8D0cwPcJD9/D4PtEgu+RAL5PevgeAd8nE3yPBvB9ysP3KPg+leB7LIDv0x6+x8D36QTfZ2R98TODxz18nwHL52Qt8d+l/4OH5XNg+aysJX5+8Y+yZcbPLz4Pfm4r15OG9TjmnxduWwrq5HJ5GX1q7dtWY3nccUbwvseLwMe5zwa0RI7FTIXOS0k+HMsvyPric/gTHr4vgOVJUUv+3zv/Jw/Lk2D5oqglfw7/Z9ky43P4U+DntnI9aViPY/6UcNtSUCeXy8voU6ta1apWtapVrWpVq1rVqla1qlWtalWrWtWq1lKxGssTjjOC9z1RBD7OfTGgJXIsZko5y50wn+TDsfySrC9+JvG0h+9LYPmKqCX/TOJfPCxfAcuXRS35ZxL/Kltm/Eziq+DntnI9aViPY/5V4baloE4ul5fRp1a1qlWtalWrWtWqVrWqVa1qVata1apWtapVraViNZanHWcE73u6CHyc+3JAS+RYzFToPnuSD8fya7K++JnEMx6+r4Hl66KW/P/18G8elq+D5VlRS/6ZxDdky4yfSXwT/NxWricN63HMvyncthTUyeXyMvrUqla1qlWtalWrWtXat63G8ozjjOB9zxSBj3PPBrREjsVMhb6nJPlwLJ+X9cXf6Z7z8D0Plm+LWvLf6f7dw/JtsHxL1JL/TvcfsmVmTRnfAT+3letJw3oc8+8Ity0FdXK5vIw+tapVrWpVq1rVqla19m2rsTznOCN433NF4OPctwJaIsdipkLfU5J8OJbflfXF3+le8PB9FyzfF7Xkv9P9p4fl+2D5nqgl/53uB7Jlxt/pXgQ/t5XrScN6HPMXhduWgjq5XF5Gn1rVqla1qlWtalWrWvu21VhecJwRvO+FIvBx7nsBLZFjMVOh7ylJPhzLH8r64u90L3n4fgiWH8ta4v9n4L88LD8Gy49kLfF3uv+WLTP+TvcT8HNbuZ40rMcx/4lw21JQJ5fLy+hTa9+2GstLjjOC971UBD7O/SigJXIsZip0Xkry4Vj+VNYXn8Nf9vD9FCyvyFric/j/eFheAcvPZC3xOfx/ZcuMz+E/Bz+3letJw3oc858Lty0FdXK5vIw+tfZtq7G87DgjeN/LReDj3M8CWiLHYqZC56UkH47lL2R98Tn8VQ/fL8DyqwCWX3pYfgWW12Qt8Tn8/2TLjM/hvwY/t5XrScN6HPNfC7ctBXVyubyMvlKxGsurjjOC971aBD7OvRbQEjkWMxU6fpJ8OJZvBPC97uF7A3yvJ/h+G8D3Gw/fb8H3mwTfmwF8v/PwvQm+3yX4/hDA93sP3x/A9/sE358C+P7o4fsT+P6Y4PtLAN+fPXx/Ad+fE3yplLzPBRXycf1peCP6+sv64u+A/Tx8XL+xlAv3lSlzgGyZWVPmQKEyN8ydvWbtzK4uU8Yg6CTuvwEwdrx+IPTXIOH+SkGdXC4vo6+3VtzP1PrusRrLYscZwfsWF4GPc+VwvAifC3JpKGsA1BMFOKcO8jinRmAZHOCcWiF8To3HLOE4qIDxTCec/9IB9q0KZ996ywD53lrxOFXru8dq6h0iWu+M+DetFR7H+JCAx4Epc2iAY3wYNIjbOhTGd1jC+A4LML5DnfHlZfSpVa1qVata1apWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqVa1qVata1apWeaupd7hovR3xby6wXjM5i2/VVQb1h+gDU2albJnxby5GQIO4rZUwviMSxndEgPGtdMaXl9GnVrWqVa1qVata1apWtapVrWpVq1rVqla1qlWtpWI19Y6UrTf+W2Cs10zO4h73rEemwvWBKbNKtsz4nnU1NIjbWgXjW50wvtUBxrfKGV9eRp9a+7bV1DtKtN78/29T5XGMj0qF6wNTZk2AY3w0NIjbWgPjOzphfEcHGN8aZ3x5GX1qVata1apWtapVrWrt21ZT7xjRevPX/FivmZzFPa75x6TC9YEps1a2zPiavw4axG2thfGtSxjfugDjW+uMLy+jT61qVata1apWtapVrX3bauqtl603/r9WsF4zOYt7XPPXp8L1gSmzQbbM+Jq/ERrEbW2A8W1MGN/GAOPb4IwvL6OvVKym3qYA+2KDx77YlArXB6bM5gD7YgYaxG1thvHNJIxvJsD4Njvjy8voKxVrBLl+ZbtzvL4cci021x9yrTY3AHJtsG9xrt3mBkFurM0Nhtw4m6uB3HjeFswTeFvITbTzFZCbxH0Oucl2fijkptj5YZCbaucrITfNzo+A3HQ7XwW5rJ2vhlyO2wa5Djs/GnIznM9Rk5vpfJ6Z3CznHGdys51zjcnNcfY1k5sL6/l1Hvcf5ObDPsu5BTY3BHILuU8ht4j7FHKLbW445JYk+HhfbAYn74u47/K+2AI53hdbIcf7YhvkeF9shxzvi2Mhx300DnLcR+Mhx300AXLcRxMhx300CXLcR5Mhx300BXKVNjcVciNsbhrkRtrcdMhV2VwWctU2l4PcKJvrgBwfjzMgN9rmZkJujM3Nglytzc2GXJ3NzYFcvc3hvtlgc/Mg12hz8yHXZHML8Lxmcwshl7G5RZBrsbnFkGu1uSVw3hoIZXba1+zeTTk08VToc5vrj68hZC3ZNFiaoJ4G0Xo64t2Px7CfrZP3uQaot16m3hzPmHrroPwWcHBd5fCeenvgD7XvrxPth/zncz14MuCpAw+/p9l6zDnvqWj3dsL7QQceOzwVvJaENgiNGVOyeLz3xoL9Kbvf5q9rhfeB+P+jqhUu05QxBvrE3afSsL4W+muMcH/h8cbl8jL61KpWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqtVSsxtLsOPGZV3MR+DiHz1uk723jM0Iu2zy7eASeXTSK1pl/toTPIzJg4LrK4T2vwDOVx+x8BaznscJnkTh+ss877O+HynZPnbDMdVVAW3D8pJ934HM6LvfdW2/HOvljoCNrnv+b3xTw/uQedzym+OyVc/icz4w573ct9hWfjbUE65fejQceM42Q4/kM+GT7OBfiGVrOlDEGxoHbxvWUw/pn4RzyjWj32LjnC7P+xYT1PBV6ronPrdtk2xqfM9uh/E6oA+sdK1tvDutN2eA6OF8O8z/gH+LA+8zE/ctms9+1JrwP5xucbdKwvjVwm9vA0QnLXJfZT56HfepF+LyU/rzB9mK/jIJ+4fWN0C/Sx5vpF7y+y4ChFiwtjhOvq/Ac2BrA907XVa3ge+u3I+DjduD55GGwhrwGcn9fg2Mo9Dmxx+9r8PcXLeDguvD3LK/B72vc654MbDsayvxb/CbI/WzG3wS98Xf4TRB7kn4T9CacJ6bZHyW+0/VrvZML7edy6x0/XhfU/40s79SXob6D8TnL/BYVHVxXObynvx033qeEP99z+HtGngpda7RB37QLWwJ8psa/dxoHfvezPw3rq6Ft44TbhtcvXC4vo29sghWvo2ud9xnreFFrR3zNPEG0zPy1xERbljkf8THO9ZTD+uqK3e+rsfMRtLkJyhmbsJ6nQvvxeOi/ybJtjT83pkD5nVAH1jtVtt4c1svXzFwH58thvp1/qA7vMxP3L5vN2yYlvA/nxzrbpGH9pMBtngyOTljmusx+Ugv7FO8zIY5zbC/2y2joF16P167Nzvvjv1mx8/iZLH1cpqAeLpeXJ4CPc+OgT6dBP8pep+ZdTeDKlL39Xh3eQ8RzAt9DdI9/MRz/sYSpwFxEl9uKB9jOMH8QMLhs9x+DmA40N3vMh7j5Yw7zxxvmjzXMH2eYP8aoAuMN9tV8GJkL8xrbSHNxYHYYc3FiLhgabEeYhjfbDjIXqOZDw3xImw9nszOZATMnHTOYZhDNzmcOEHMSMAfINIrppk8ozN7bQTGDYibFLIrZFHMo5lLMo5hPsYBiIcUiisUUS2zf7kOxlGIZxb4U+1HsT3FAWf4PeJZTrKA4iOJgikMoDqU4jOJwipUUR1AcSXEUxdEUx1AcS7GK4jiK4ylOoDiR4iSKkylWU5xCsYZiLcU6ivUUGyi6KE6lOI1iI8XpFGdQbKLYTLGFoptiK8WZFGdRbKPoodhOcTbFDopzKHZSnEtxHsX5FBdQXEhxEcXFFJdQXEpxGcXlFFdQXElxFcXVFNdQXEtxHcX1ZfmxvpHiJoqbKW6huJXiNorbKe6guJPiLoq7Ke6huJfiPor7KR6geJDiIYpdZbv/4Al3/Dp7MPAX4DU9PRs2b+3J9HRnNm/f1LNx66admR0be07LdJ+94ayuTd07cONf7s3Gr9uNG96+8Zr16995u3J7WuGjYvmW9RvOyXRv78l0d2XWdm/fsn7b/wPHYwOWXsIBAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "last_balances",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XS07DQAyGZ6Z5tumTHiTtCXIDJJbsKlGxRAIWPT4kxOqHSSOkOARvZsYz9v/bmThOcM559yUzdxWPMaj5Y7tOcL5qx3KgJMC28hl/+ohbXzk4S1yrNpZgi3tYdOQzQZ6tcLz7LhXmM8Stz+XYD9AFZVvn7h77cYdN0oFHe9FF7poHbcscxSqWcpg0OSJOhbVgzRWHMblIHsRvpLhMiZva4pa1jwy4ci9S5F3wM/DIjXl4xePiftaFEXCPrAOMb26L01sHBOtWTZqCy62axH0Zg7LVNalo56xJy3Y+6/BdQCc5WXbYMkeFiqUcJk2OiFNhXSBer/hNySX7Iy68pxXWxT/AXdniNvVxDVy5oyusBX8NHhtjHl7xuAB3A9ydLe4xh3+RvvqxA5etLZdD7fPO1mfzfPfgL7EKzgL7/D7sjWPzwBS/sia/33JdT8w1h24DnexvoQsqDvancj514/Tnibv2k1Y+2UuL9L0zY/az9Z2VOvn2/vJ6ej4/nE9P/IWMFMUAapzzUy3tYQSdvB5s28Q+hU78ZNjT6TGLX/vV/8siH0zA3FZsDwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "shieldswap_call",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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ya+ykl9lJb/KSn6VlfwqK/lVVvKrrORXRcmvipJfFSW/Kkp+VZT8qij5VVHyq6LkV0XJr4qSXxUlvypKflWU/Koo+VVR8qui5FdFya+Kkl8VJb8qSn5VlPyqKPlVUfKrouRXRcmvipJfFSW/Kkp+VZT8qij5VVHyq6LkV0XJr4qSXxUlvypKflWU/Koo+VVR8qui5FdFya+Kkl8VJb8qSn5VlPyqKPlVUfKrouRXRcmvipJfFSW/Kkp+VZT8qij5VVHyq6LkV0XJr4qSXxUlvypKflWU/Koo+VVR8qui5FdFya+Kkl8VJb8qSn5VlPyqKPlVUfKrouRXRcmvipJfFSW/Kkp+VZT8qij5VVHyq6LkV0XJr4qSXxUlvypKflWU/Koo+VVR8qui5FdFya+Kkl8VJb8qSn5VlPyqKPlVUfKrouRXRcmvipJfFSW/Kkp+VZX8qir5VVXyq6rkV1XJr6qSX1Ulv6pKflWV/Koq+VVV8quq5FdVya+qkl9VJb+qSn5VlfyqKvlVVfKrquRXVcmvqpJfVSW/qkp+VZX8qir5VVXyq6rkV1XJr6qSX1Ulv6pKflWV/Koq+VVV8quq5FdVya+qkl9VJb+qSn5VlfyqKvlVVfKrquRXVcmvqpJfVSW/qkp+VZX8qir5VVXyq6rkV1XJr6qSX1Ulv6pKflWV/Koq+VVV8quq5FdVya+qkl9VJb+qSn5VlfyqKvlVVfKrquRXVcmvqpJfVSW/qkp+VZX8qir5VVXyq6rkV1XJr6qSX1Ulv6pKflWV/Koq+VVV8quq5FdVya+qkl9VJb+qSn5VlfyqKvlVVfKrquRXVcmvqpJfVSW/qkp+VZX8qir5VVXyq6rkV03Jr5qSXzUlv2pKftWU/Kop+VVT8qum5FdNya+akl81Jb9qSn7VlPyqKflVU/KrpuRXTcmvmpJfNSW/akp+1ZT8qin5VVPyq6bkV03Jr5qSXzUlv2pKftWU/Kop+VVT8qum5FdNya+akl81Jb9qSn7VlPyqKflVU/KrpuRXTcmvmpJfNSW/akp+1ZT8qin5VVPyq6bkV03Jr5qSXzUlv2pKftWU/Kop+VVT8qum5FdNya+akl81Jb9qSn7VlPyqKflVU/KrpuRXTcmvmpJfNSW/akp+1ZT8qin5VVPyq6bkV03Jr5qSXzUlv2pKftWU/Kop+VVT8qum5FdN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xyVLHJcsvTDVNnFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclSxyXLHFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclSxyXLHFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclSxyXLHFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclSxyXLHFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclSxyXLHFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclSxyXLHFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclSxyXLHFcssRxyRLHJUsclyxxXLLEcckSxyVLHJcscVyyxHHJEsclyxyXLHNcssxxyTLHJcsvTLXNHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckyxyXLHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckyxyXLHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckyxyXLHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckyxyXLHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckyxyXLHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckyxyXLHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckyxyXLHJcsc1yyzHHJMsclyxyXLHNcssxxyTLHJcsclyxzXLLMcckKxyUrHJescFyywnHJygtTbQvHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcssJxyQrHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcssJxyQrHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcssJxyQrHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcssJxyQrHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcssJxyQrHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcssJxyQrHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcssJxyQrHJSscl6xwXLLCcckKxyUrHJescFyywnHJCsclKxyXrHBcsspxySrHJascl6xyXLL6wlTbynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJesclyyynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJesclyyynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJesclyyynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJesclyyynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJesclyyynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJesclyyynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJesclyyynHJKsclqxyXrHJcsspxySrHJascl6xyXLLKcckqxyWrHJescVyyxnHJGsclaxyXrL0w1bZxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrHJWscl6xxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrHJWscl6xxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrHJWscl6xxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrHJWscl6xxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrHJWscl6xxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrHJWscl6xxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrHJWscl6xxXLLGcckaxyVrHJescVyyxnHJGsclaxyXrHFcssZxyRrGJet/R6m2/e8o1bb/HaXa9r+jVNv+d5Rq2/+OUm3731Gqbf87SrXtf0eptv3vONUW45L1KJxqi3HJehROtcW4ZD0Kp9piXLIehVNtMS5Zj8KpthiXrEfhVFuMS9ajcKotxiXrUTjVFuOS9SicaotxyXoUTrXFuGQ9CqfaYlyyHoVTbTEuWY/CqbYYl6xH4VRbjEvWo3CqLcYl61E41RbjkvUonGqLccl6FE61xbhkPQqn2mJc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",
      "",
      "eJzNmd1qg0AQRt9lr6U4f5r4KqUX0qYQCKZU78R3TwPmp3QHoSy7353CjBwVzgGdw+n83k/H8zCGbg71i4XudQ7jVz9cz8ep/55Cxw01VTgMH9dDtaUKn8fTIXS0VH9miRteZ0lEHrNikWkxXYdl/3Rdbpe36oemgaJpoWh2UDR7KBqqsXAIC4excAQLR7FwsIxMWEomLCcTlpQJy8qMZWXGsjJjWZmxrMxYVubMVtaa1mHl+hdOBF3shq76mDVb0TMbPCV6ZtunRM9chn+iG0fQM1ckIbo4xTG5o+84nzXEKU4pHKc4pXCc4pTCcYpTCscpTikcpyKlcJwylMJxbF8KxzF4IRzFsrJiWVmxrKxYVlYsKyuWlRXLyoplZcWysmJZ2bCsbFhWNiwrG5aVDcvKhmVly2zlhJ8tLLPBU6Jntn1K9MxlSPjFpclckYTobfyp1+2N/PlV3f/Cx+93Yyneto2leIE2luKd2FiK29xfWpYLaQTlFg==",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod interfaces;\nmod types;\n\ncontract FlashLoan {\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        oracle::debug_log::debug_log,\n        selector::compute_selector, // used to compute function selector for calling a function\n        state_vars::{singleton::Singleton, map::Map, public_state::PublicState, set::Set},\n        types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n            field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n    };\n    use dep::safe_math::SafeU120;\n    use dep::authwit::auth::{IS_VALID_SELECTOR, assert_current_call_valid_authwit_public, compute_authwit_message_hash};\n\n    use crate::interfaces::ShieldswapPair;\n    use crate::types::safe_u120_serialization::{SAFE_U120_SERIALIZED_LEN, SafeU120SerializationMethods};\n\n    struct Storage {\n        last_balance_0: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        last_balance_1: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Self {\n                last_balance_0: PublicState::new(context, 1, SafeU120SerializationMethods),\n                last_balance_1: PublicState::new(context, 2, SafeU120SerializationMethods),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn flash_loan(pair: AztecAddress, amount0: Field, amount1: Field) {\n        debug_log(\"start flash loan\");\n        ShieldswapPair::at(pair.address).swap_public(\n            &mut context,\n            amount0,\n            amount0,\n            amount1,\n            amount1,\n            0,\n            0,\n            context.this_address(),\n            true\n        );\n        debug_log(\"end flash loan\");\n    }\n\n    #[aztec(public)]\n    fn shieldswap_call(amount0: Field, amount1: Field) {\n        debug_log(\"start shieldswap call\");\n        storage.last_balance_0.write(SafeU120::new(amount0));\n        storage.last_balance_1.write(SafeU120::new(amount1));\n        debug_log(\"end shieldswap call\");\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> pub Field {\n        // approve any action (UNSAFE)\n        // this allows shieldswap pair to transfer tokens out of this contract\n        IS_VALID_SELECTOR\n    }\n\n    unconstrained fn last_balances() -> [u120; 2] {\n        [storage.last_balance_0.read().value, storage.last_balance_1.read().value]\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; 0]\n    ) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/flash_loan/src/main.nr"
      },
      "24": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "77": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "96": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "97": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "112": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "115": {
        "source": "// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nfn debug_log_oracle<T, N>(_msg: T, _num_args: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_format_oracle<T, N>(_msg: T, _args: [Field; N], _num_args: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_field_oracle(_field: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_array_oracle<T, N>(_arbitrary_array: [T;N]) -> Field {}\n#[oracle(debugLogWithPrefix)]\nfn debug_log_array_with_prefix_oracle<S, T, N>(_prefix: S, _arbitrary_array: [T;N]) -> Field {}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<T>(msg: T) {\n    assert(debug_log_oracle(msg, 0) == 0);\n}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\nunconstrained pub fn debug_log_format<T, N>(msg: T, args: [Field; N]) {\n    assert(debug_log_format_oracle(msg, args, args.len()) == 0);\n}\n\n/// Example:\n/// `debug_log_field(my_field);`\nunconstrained pub fn debug_log_field(field: Field) {\n    assert(debug_log_field_oracle(field) == 0);\n}\n\n/// Example:\n/// `debug_log_array(my_array);`\nunconstrained fn debug_log_array<T, N>(arbitrary_array: [T; N]) {\n    assert(debug_log_array_oracle(arbitrary_array) == 0);\n}\n\n/// Example:\n/// `debug_log_array_with_prefix(\"Prefix\", my_array);`\nunconstrained pub fn debug_log_array_with_prefix<S, T, N>(prefix: S, arbitrary_array: [T; N]) {\n    assert(debug_log_array_with_prefix_oracle(prefix, arbitrary_array) == 0);\n}\n",
        "path": "/aztec/oracle/debug_log.nr"
      },
      "125": {
        "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/public_call.nr"
      },
      "127": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "131": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
        "path": "/aztec/selector.nr"
      },
      "135": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "141": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "147": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "148": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "153": {
        "source": "use dep::aztec::{\n  context::{PrivateContext, PublicContext, Context},\n  selector::compute_selector,\n  types::address::AztecAddress,\n};\n\nstruct ShieldswapPair {\n  address: Field,\n}\n\nimpl ShieldswapPair {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn swap_public(self: Self, context: &mut PublicContext,\n        amount0_in: Field,\n        amount0_out: Field,\n        amount1_in: Field,\n        amount1_out: Field,\n        nonce0: Field,\n        nonce1: Field,\n        to: Field,\n        should_call: bool,\n  ) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"swap_public(Field,Field,Field,Field,Field,Field,(Field),bool)\"),\n      [\n        amount0_in,\n        amount0_out,\n        amount1_in,\n        amount1_out,\n        nonce0,\n        nonce1,\n        to,\n        should_call as Field,\n      ],\n    );\n  }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/flash_loan/src/interfaces.nr"
      },
      "155": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\n// This is safe when reading from storage IF only correct safeu120 was written to storage\nfn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120 { value: fields[0] as u120 }\n}\n\nfn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/flash_loan/src/types/safe_u120_serialization.nr"
      }
    }
  }
}
{
  "name": "FlashLoan",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+1VQQ4CIQws7C5sheg/PGHiA/b/rxK0TSYsnuwejDZpgBaGYWggEpGjl03VZ9qb5jdpy2d2c3ZY5Uie/kt4ToY83YCng7po7VI9VI/VrxJn2tcOy1zEYlnbzEMsSn+Sts1ZjXUKwM0IswT7+ywM2sygkWqzDDQPA83jQPMVMC6Qp+5OzrKGbc92x7tWc914gz7D+Y6oh5Mt5rMekjFmw8igieqn3BPkE+iVjfVysKfi6hj5/bn+NleGGL5Bml8h5rtz4DuXAaN/I0w/T5INPGze7N2np/YAao7Tjj0JAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdZZOTZxSH8V0gSd27uLu1ySbZJFVK3alSL6Rk6y1V6qXU3XB390/IuWbCwAt4xb0z3HNl5j9590x+m+yj5z7nZE9Pz7aeM6/e7vuC7nv5wl6VQmyjcI7tVssDtVqn0d+pVCtLy/2tdrNertXbA81Ks1Jv1pf1N6vVTrPWbLTarUa5ValVO5XBeqs62N1wId1nLA+FuxjbKA6Bu3iRu0uxjdIQuEuJ3ef7vV/o5xw5RJ9zWOLvqTeheVQm5mEJzaMzMQ9PaB6TiXlEQvPYTMyFhOZxmZiLCc3jMzGXEponZGIemdA8UWieJDRPFpqnCM1TheZpQvN0oXmG0DxTaJ4lNM8WmucIzXOF5nlC83yh+Sah+WahuSw0V4TmfqG5KjTXhOa60DwgNDeE5qbQ3BKabxGabxWabxOabxea7xCa7xSaFwjNdwnNC4Xmu4Xme4Tme4Xm+4Tm+4XmB4TmB4Xmh4Tmh4XmR4TmR4Xmx4Tmx4XmRULzE0Lzk0LzU0Lz00LzM0Lzs0LzYqH5OaH5eaH5BaH5RaH5JaH5ZaH5FaH5VaF5idC8VGhuC82vCc3LhOaO0DwoNL8uNL8hNL8pNL8lNL8tNL8jNL8rNL8nNL8vNC8Xmj8Qmj8Umj8Smj8Wmj8Rmj8VmlcIzZ8JzZ8LzV8IzV8KzV8JzV8Lzd8Izd8KzSuF5u+E5lVC8/dC8w9C849C809C889C8y9C869C829C8+9C8x9C859C819C899C8z9C879C839C8/9C82qheY3QvFZoXic0rxeaNwjNG4XmTULzZqF5i9C8VWjeJjRvF5p3CM07heZdmZgvSWjenYn50oTmPZmYL0to3puJ+fKE5n2ZmK9IaN6fifnKhOYDmZivSmg+mIn56oTmQ5mYr0loPpyJ+dqE5iOZmK9LaD6aifn6hOZjmZhvSGg+non5xoTmE5mY+xKaTyY093W309s1D4+MiBQixUgpwjUh10hcM3AOzTkl51icc3AM5pjEPpp9Fv/D/Kb5jvvO+ntu6r6PioyOjImMjYyLjI9MiEyMTIpMjkyJTI1Mi0yPzIjMjMyKzI7MicyNzIvMjzDjnpnvfInMBGdGNjOjmaHMTGFm7DYizGBlJikzOplZyQxHZhoy4+/0zDtmoi2MMDOLGVLMVGLGEDN3mEHDTBZmlDCzgxkWzHRgxgE9/xdF6AlPj3R6htNDm57S9FheHKEHLz1p6dFKz1J6eNLTkh6P9DxcEqEnXjtCzzR6iNFTix5T9FyiBxE9eehRQ88WepjQ04MeF/R8WB6hJwBr5Fkzzhpq1hSzxnZFhDWYrElkjR5r1ljDxZom1viw5mVlhDURqyLUzFNDTk01NcbU3FKDSk0mNYrU7FHDRk0XNU7U/FADQ00INRLUDPAMnWfKPGPlmSPP4HgmxTMafhPcw+eeNvd4uee5PcI9Me4Rcc+EewhcU3ONyTUX1yCck3OOyjkb5zAc0znGsc9nH8g+gf+R069TXMw0LzyaAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "flash_loan",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "pool",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+3dB5gcR5UH8B2tUu8orLSrlTbPBuU0s8p5LTlJjnKUo6y0tmxJK1sry3LOOedskbMxxubgMIfP5uAwZ8A+OMwBNgeHOXwYzGEDJt6rnnrWX+X2fFvoFcx4X3/f+6b79XTVr6q6e3q6Z6VdZWVlqbL8VE5RVfb2idd32tfs3k25lFxZ2ZDOfiXiLC8RZ/8ScQ4oEefAEnEOKhHn4BJxRiXirCgRZ7pEnENKxDm0RJzDSsQ5vESclSXiHFEizpEl4qwSdNaCs9q+jrKvNfZ1tH0dY195mzr7Wm/b2N8uN1A0UjRRNNt13CEZihaKVoo2inaKsRTjKMZTTKCYSDGJYjLFFIqpFNMopttychQdFDMoZlLMophNMYdiLsU8ivkUCygWUiyiWEyxxPbbPhRLKZZR7EuxH8X+FAdQHEixnGIFxUEUB1McQnEoxWG2LRnblsMpVlIcQXEkxVEUR1McQ3EsxSqK4yiOpziB4kSKkyhOplhNcQrFGoq1FOso1lNsoOiiOJXiNIqNFKdTnEGxiWIzxRaKbqfPt1KcSXEWxTa7rtKu66HYTnE2xQ6Kcyh2UpxLcR7F+RQXUFxIcRHFxRSXUFxKcZlT1uUUV1BcSXEVxdUU11BcS3EdxfUUN1DcSHETxc0Ut1DcSnGbLaufLet2ijuc3J0Ud9n5u+3rPfb1Xvt6n329374+YF8ftK8P2dddFB0V+XlzDed+1zY53udTkOP9vx/k+FgohxwfF/0hx8fIAMjx8TIQcnzsDIJcvZ0fDLkGmOfXRjtfAbkmO5+GXLOdHwK5jJ0fCrkWOz8Mcq12fjjk2ux8JeTa7fwIyI218yPtK7fbTJ32NbuXkylT+LyaNXYe8ypoD495NeR4zEdBjse8BnLc9tGQ4zEfAzke81rI8ZjXQY7HvB5yPOa4r/CYN0KOx7wJcjzmzZDjMc9Ajse8BXI85q2Q4zFvgxz3ZTvkuC95XzF9twzW84THIN434xyvx2OwHMrkHK/HY5DX4zHI6/EYxPX8yuvxGOT1eLzxejy2eLzwOOJtRkKOxwv3Oy4H9zEeL9yfuGzcd3i8cN/h+nDf4fHCfYcNuO/wvo/7DrsykON9H/cdtvK+Y9pl+p73/077mt27KYd18ZRyljthHs/V9bKWGXje742lHiwNwv2Shn5pgHqahOvBz6vetLkJLM3CFlNmRrbM+LK2BfzcVq4nDeuroW0twm3D61Iul5dbwFLnOPGaoK4IfJzD80xLgq9V1teRKttzHDthuRV8nGsGS0bYEjkWMxU6ZjJgaRe15LJ4LdgbSztY2kQt+eN3rGyZ8XXkOOEyTRnjoU+4/9iehvXjoL/GC/dXCurkcnkZfWpVq1rVqla1qlWtau3bVvyeg/f2+H0tReDjXBtYpL8b4D0uLtvcR3wY6pS9R5HL4vdk/m7p3mcrh/dURrtdj9pcRdnbv1vjMwIcv0ZRf378uB4ul5fxuQW3Be/3SN97SkE9XO67t96OdfL3CXNZc1/a3OvO2PIanHbgfaQaJ2f2ySehvcVybxfvffYDn/D93txfe78X79OVg0/6WMXni73xNYKPt8PnKtL3a/Gc1RtfM/h4uwHgk76nifdOe+NLus85EF6l75f53rtrAx9vNwh8wp+vOXx+3BsfXivxdoPBJ30tYnzjPHx4fcLbReCbGMA3wcM3EXy8XQX4JgfwTfLwTQbfJJhn39QAvikevqlg4u2GgG96AN80D9908PF2Q8GXC+DLlvXelwMfbzcMfDMC+Do8fDPAx9sNB9+sAL6ZHr5Z4OPtKsE3J4BvtodvDvh4uxHgmxfAN9fDNw98vB3+RmlBAN98D98C8PF2VeBbFMC30MO3CHy8XQ34lsj64uegiz18S8CyT4C+6vSw7AOWZQH6ZamHZRlY9he1zIjvkezrYdkfLPuJWvLPhw+QLTN+PnygcJmmjOXQJ9x/bE/D+gOhv5YL91cK6uRyeRl9alWrWtWqVrWqVa1qVata1apWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqVd5qLEsdZwTvW1oEPs7tF9ASORYzFfrtSZIPx/IgWV/8O50VHr6DwHKoqKUj/p3OwR6WQ8FyiKgl/zudw2TLjH9Tczj4ua1cTxrW45gfLty2FNTJ5fIy+tSqVrWqVa1qVata1apWtapVrWpVq1rVqla1qrVUrMaywnFG8L4VReDj3CEBLZFjMVOh++xJPhzLI2R98TOJlR6+I8BytKxlprEc6WE5GixHyVriZxLHyJaZNWUcC35uK9eThvU45scKty0FdXK5vIw+tfZtq7GsdJwRvG9lEfg4d1RAS+RYzFTovJTkw7E8TtYXn8NXefiOA8uJopb8/w9wvIflRLCcIGrJn8NPki0zPoefDH5uK9eThvU45icLty0FdXK5vIw+tapVrWpVq1rVqla19m2rsaxynBG8b1UR+Dh3QkBL5FjMVOh7SpIPx/IUWV/8nW61h+8UsKwTteS/063xsKwDy1pRS/473XrZMuPvdBvAz23letKwHsd8g3DbUlAnl8vL6FOrWtWqVrWqVa1qVWvfthrLascZwftWF4GPc2sDWiLHYqZC31OSfDiWp8r64u90XR6+U8FyegDLaR6W08GyUdYSf6c7Q7bM+DvdJvBzW7meNKzHMd8k3LYU1Mnl8jL6SsVqLF2OM4L3dRWBj3MbA1oix2KmQsdPkg/HcousLz6+N3v4toDlzACWbg/LmWDZKmuJzzVnyZYZn2u2gZ/byvWkYT2O+TbhtqWgTi6Xl9FXKlZj2ew4I3jf5iLwcW5rQEvkWMxU6PhJ8uFYbg/g6/HwbQdfT4JvRwDf2R6+HeDj7SLw7QzgO8fDtxN8vB3+v33nBfCd6+E7D3znwjz7LgjgO9/DdwGYeLsh4LsogO9CD99F4OPt8P/tuySA72IP3yXg4+3w/+27LIDvUg/fZeDj7YaD74oAvss9fFeAj7fD899VAXxXeviuAt+VCb5rAviu9vBdA76rE3zXBfBd6+G7DnzXJvhuCOC73sN3A/iuT/DdFMB3o4fvJrDcLGvJpsFyM9Rza4A231LW+zZz/WnYDn23B/Dd5uG7HXy3JfjuDOC7w8N3J/h4O9yn7w7gu8vDdzf47krw3RvAd4+H717w3ZPguz+A7z4P3/3guy/B92AA3wMevgfB90CCb1cA30Mevl3geyjB994Avvd4+N4Lvvck+N4fwPc+D9/7wfe+BN8HA/g+4OH7IPg+kOD7cADfhzx8HwbfhxJ8Hw3g+4iH76Pg+0iC7+MBfB/z8H0cfB9L8D0cwPcJD9/D4PtEgu+RAL5PevgeAd8nE3yPBvB9ysP3KPg+leB7LIDv0x6+x8D36QTfZ2R98TODxz18nwHL52Qt8d+l/4OH5XNg+aysJX5+8Y+yZcbPLz4Pfm4r15OG9TjmnxduWwrq5HJ5GX1q7dtWY3nccUbwvseLwMe5zwa0RI7FTIXOS0k+HMsvyPric/gTHr4vgOVJUUv+3zv/Jw/Lk2D5oqglfw7/Z9ky43P4U+DntnI9aViPY/6UcNtSUCeXy8voU6ta1apWtapVrWpVq1rVqla1qlWtalWrWtWq1lKxGssTjjOC9z1RBD7OfTGgJXIsZko5y50wn+TDsfySrC9+JvG0h+9LYPmKqCX/TOJfPCxfAcuXRS35ZxL/Kltm/Eziq+DntnI9aViPY/5V4baloE4ul5fRp1a1qlWtalWrWtWqVrWqVa1qVata1apWtapVraViNZanHWcE73u6CHyc+3JAS+RYzFToPnuSD8fya7K++JnEMx6+r4Hl66KW/P/18G8elq+D5VlRS/6ZxDdky4yfSXwT/NxWricN63HMvyncthTUyeXyMvrUqla1qlWtalWrWtXat63G8ozjjOB9zxSBj3PPBrREjsVMhb6nJPlwLJ+X9cXf6Z7z8D0Plm+LWvLf6f7dw/JtsHxL1JL/TvcfsmVmTRnfAT+3letJw3oc8+8Ity0FdXK5vIw+tapVrWpVq1rVqla19m2rsTznOCN433NF4OPctwJaIsdipkLfU5J8OJbflfXF3+le8PB9FyzfF7Xkv9P9p4fl+2D5nqgl/53uB7Jlxt/pXgQ/t5XrScN6HPMXhduWgjq5XF5Gn1rVqla1qlWtalWrWvu21VhecJwRvO+FIvBx7nsBLZFjMVOh7ylJPhzLH8r64u90L3n4fgiWH8ta4v9n4L88LD8Gy49kLfF3uv+WLTP+TvcT8HNbuZ40rMcx/4lw21JQJ5fLy+hTa9+2GstLjjOC971UBD7O/SigJXIsZip0Xkry4Vj+VNYXn8Nf9vD9FCyvyFric/j/eFheAcvPZC3xOfx/ZcuMz+E/Bz+3letJw3oc858Lty0FdXK5vIw+tfZtq7G87DgjeN/LReDj3M8CWiLHYqZC56UkH47lL2R98Tn8VQ/fL8DyqwCWX3pYfgWW12Qt8Tn8/2TLjM/hvwY/t5XrScN6HPNfC7ctBXVyubyMvlKxGsurjjOC971aBD7OvRbQEjkWMxU6fpJ8OJZvBPC97uF7A3yvJ/h+G8D3Gw/fb8H3mwTfmwF8v/PwvQm+3yX4/hDA93sP3x/A9/sE358C+P7o4fsT+P6Y4PtLAN+fPXx/Ad+fE3yplLzPBRXycf1peCP6+sv64u+A/Tx8XL+xlAv3lSlzgGyZWVPmQKEyN8ydvWbtzK4uU8Yg6CTuvwEwdrx+IPTXIOH+SkGdXC4vo6+3VtzP1PrusRrLYscZwfsWF4GPc+VwvAifC3JpKGsA1BMFOKcO8jinRmAZHOCcWiF8To3HLOE4qIDxTCec/9IB9q0KZ996ywD53lrxOFXru8dq6h0iWu+M+DetFR7H+JCAx4Epc2iAY3wYNIjbOhTGd1jC+A4LML5DnfHlZfSpVa1qVata1apWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqVa1qVata1apWeaupd7hovR3xby6wXjM5i2/VVQb1h+gDU2albJnxby5GQIO4rZUwviMSxndEgPGtdMaXl9GnVrWqVa1qVata1apWtapVrWpVq1rVqla1qlWtpWI19Y6UrTf+W2Cs10zO4h73rEemwvWBKbNKtsz4nnU1NIjbWgXjW50wvtUBxrfKGV9eRp9a+7bV1DtKtN78/29T5XGMj0qF6wNTZk2AY3w0NIjbWgPjOzphfEcHGN8aZ3x5GX1qVata1apWtapVrWrt21ZT7xjRevPX/FivmZzFPa75x6TC9YEps1a2zPiavw4axG2thfGtSxjfugDjW+uMLy+jT61qVata1apWtapVrX3bauqtl603/r9WsF4zOYt7XPPXp8L1gSmzQbbM+Jq/ERrEbW2A8W1MGN/GAOPb4IwvL6OvVKym3qYA+2KDx77YlArXB6bM5gD7YgYaxG1thvHNJIxvJsD4Njvjy8voKxVrBLl+ZbtzvL4cci021x9yrTY3AHJtsG9xrt3mBkFurM0Nhtw4m6uB3HjeFswTeFvITbTzFZCbxH0Oucl2fijkptj5YZCbaucrITfNzo+A3HQ7XwW5rJ2vhlyO2wa5Djs/GnIznM9Rk5vpfJ6Z3CznHGdys51zjcnNcfY1k5sL6/l1Hvcf5ObDPsu5BTY3BHILuU8ht4j7FHKLbW445JYk+HhfbAYn74u47/K+2AI53hdbIcf7YhvkeF9shxzvi2Mhx300DnLcR+Mhx300AXLcRxMhx300CXLcR5Mhx300BXKVNjcVciNsbhrkRtrcdMhV2VwWctU2l4PcKJvrgBwfjzMgN9rmZkJujM3Nglytzc2GXJ3NzYFcvc3hvtlgc/Mg12hz8yHXZHML8Lxmcwshl7G5RZBrsbnFkGu1uSVw3hoIZXba1+zeTTk08VToc5vrj68hZC3ZNFiaoJ4G0Xo64t2Px7CfrZP3uQaot16m3hzPmHrroPwWcHBd5fCeenvgD7XvrxPth/zncz14MuCpAw+/p9l6zDnvqWj3dsL7QQceOzwVvJaENgiNGVOyeLz3xoL9Kbvf5q9rhfeB+P+jqhUu05QxBvrE3afSsL4W+muMcH/h8cbl8jL61KpWtapVrWpVq1rVqla1qlWtalWrWtWqVrWqtVSsxtLsOPGZV3MR+DiHz1uk723jM0Iu2zy7eASeXTSK1pl/toTPIzJg4LrK4T2vwDOVx+x8BaznscJnkTh+ss877O+HynZPnbDMdVVAW3D8pJ934HM6LvfdW2/HOvljoCNrnv+b3xTw/uQedzym+OyVc/icz4w573ct9hWfjbUE65fejQceM42Q4/kM+GT7OBfiGVrOlDEGxoHbxvWUw/pn4RzyjWj32LjnC7P+xYT1PBV6ronPrdtk2xqfM9uh/E6oA+sdK1tvDutN2eA6OF8O8z/gH+LA+8zE/ctms9+1JrwP5xucbdKwvjVwm9vA0QnLXJfZT56HfepF+LyU/rzB9mK/jIJ+4fWN0C/Sx5vpF7y+y4ChFiwtjhOvq/Ac2BrA907XVa3ge+u3I+DjduD55GGwhrwGcn9fg2Mo9Dmxx+9r8PcXLeDguvD3LK/B72vc654MbDsayvxb/CbI/WzG3wS98Xf4TRB7kn4T9CacJ6bZHyW+0/VrvZML7edy6x0/XhfU/40s79SXob6D8TnL/BYVHVxXObynvx033qeEP99z+HtGngpda7RB37QLWwJ8psa/dxoHfvezPw3rq6Ft44TbhtcvXC4vo29sghWvo2ud9xnreFFrR3zNPEG0zPy1xERbljkf8THO9ZTD+uqK3e+rsfMRtLkJyhmbsJ6nQvvxeOi/ybJtjT83pkD5nVAH1jtVtt4c1svXzFwH58thvp1/qA7vMxP3L5vN2yYlvA/nxzrbpGH9pMBtngyOTljmusx+Ugv7FO8zIY5zbC/2y2joF16P167Nzvvjv1mx8/iZLH1cpqAeLpeXJ4CPc+OgT6dBP8pep+ZdTeDKlL39Xh3eQ8RzAt9DdI9/MRz/sYSpwFxEl9uKB9jOMH8QMLhs9x+DmA40N3vMh7j5Yw7zxxvmjzXMH2eYP8aoAuMN9tV8GJkL8xrbSHNxYHYYc3FiLhgabEeYhjfbDjIXqOZDw3xImw9nszOZATMnHTOYZhDNzmcOEHMSMAfINIrppk8ozN7bQTGDYibFLIrZFHMo5lLMo5hPsYBiIcUiisUUS2zf7kOxlGIZxb4U+1HsT3FAWf4PeJZTrKA4iOJgikMoDqU4jOJwipUUR1AcSXEUxdEUx1AcS7GK4jiK4ylOoDiR4iSKkylWU5xCsYZiLcU6ivUUGyi6KE6lOI1iI8XpFGdQbKLYTLGFoptiK8WZFGdRbKPoodhOcTbFDopzKHZSnEtxHsX5FBdQXEhxEcXFFJdQXEpxGcXlFFdQXElxFcXVFNdQXEtxHcX1ZfmxvpHiJoqbKW6huJXiNorbKe6guJPiLoq7Ke6huJfiPor7KR6geJDiIYpdZbv/4Al3/Dp7MPAX4DU9PRs2b+3J9HRnNm/f1LNx66admR0be07LdJ+94ayuTd07cONf7s3Gr9uNG96+8Zr16995u3J7WuGjYvmW9RvOyXRv78l0d2XWdm/fsn7b/wPHYwOWXsIBAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "last_balances",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XS07DQAyGZ6Z5tumTHiTtCXIDJJbsKlGxRAIWPT4kxOqHSSOkOARvZsYz9v/bmThOcM559yUzdxWPMaj5Y7tOcL5qx3KgJMC28hl/+ohbXzk4S1yrNpZgi3tYdOQzQZ6tcLz7LhXmM8Stz+XYD9AFZVvn7h77cYdN0oFHe9FF7poHbcscxSqWcpg0OSJOhbVgzRWHMblIHsRvpLhMiZva4pa1jwy4ci9S5F3wM/DIjXl4xePiftaFEXCPrAOMb26L01sHBOtWTZqCy62axH0Zg7LVNalo56xJy3Y+6/BdQCc5WXbYMkeFiqUcJk2OiFNhXSBer/hNySX7Iy68pxXWxT/AXdniNvVxDVy5oyusBX8NHhtjHl7xuAB3A9ydLe4xh3+RvvqxA5etLZdD7fPO1mfzfPfgL7EKzgL7/D7sjWPzwBS/sia/33JdT8w1h24DnexvoQsqDvancj514/Tnibv2k1Y+2UuL9L0zY/az9Z2VOvn2/vJ6ej4/nE9P/IWMFMUAapzzUy3tYQSdvB5s28Q+hU78ZNjT6TGLX/vV/8siH0zA3FZsDwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "reset_last_balances",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "shieldswap_call",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "",
      "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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod interfaces;\nmod types;\n\ncontract FlashLoan {\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        oracle::debug_log::debug_log,\n        selector::compute_selector, // used to compute function selector for calling a function\n        state_vars::{singleton::Singleton, map::Map, public_state::PublicState, set::Set},\n        types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n            field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n    };\n    use dep::safe_math::SafeU120;\n    use dep::authwit::auth::{IS_VALID_SELECTOR, assert_current_call_valid_authwit_public, compute_authwit_message_hash};\n\n    use crate::interfaces::ShieldswapPool;\n    use crate::types::safe_u120_serialization::{SAFE_U120_SERIALIZED_LEN, SafeU120SerializationMethods};\n\n    struct Storage {\n        last_balance_0: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        last_balance_1: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Self {\n                last_balance_0: PublicState::new(context, 1, SafeU120SerializationMethods),\n                last_balance_1: PublicState::new(context, 2, SafeU120SerializationMethods),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn flash_loan(pool: AztecAddress, amount0: Field, amount1: Field) {\n        ShieldswapPool::at(pool.address).swap_public(\n            &mut context,\n            amount0,\n            amount0,\n            amount1,\n            amount1,\n            0,\n            0,\n            context.this_address(),\n            true\n        );\n    }\n\n    #[aztec(public)]\n    fn shieldswap_call(amount0: Field, amount1: Field) {\n        storage.last_balance_0.write(SafeU120::new(amount0));\n        storage.last_balance_1.write(SafeU120::new(amount1));\n    }\n\n    #[aztec(public)]\n    fn reset_last_balances() {\n        storage.last_balance_0.write(SafeU120::min());\n        storage.last_balance_1.write(SafeU120::min());\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> pub Field {\n        // approve any action (UNSAFE)\n        // this allows shieldswap pool to transfer tokens out of this contract\n        IS_VALID_SELECTOR\n    }\n\n    unconstrained fn last_balances() -> [u120; 2] {\n        [storage.last_balance_0.read().value, storage.last_balance_1.read().value]\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; 0]\n    ) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/flash_loan/src/main.nr"
      },
      "24": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "35": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "77": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "94": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "96": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "97": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "112": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "125": {
        "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/public_call.nr"
      },
      "127": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "131": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
        "path": "/aztec/selector.nr"
      },
      "135": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "141": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "147": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "148": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "153": {
        "source": "use dep::aztec::{\n  context::{PrivateContext, PublicContext, Context},\n  selector::compute_selector,\n  types::address::AztecAddress,\n};\n\nstruct ShieldswapPool {\n  address: Field,\n}\n\nimpl ShieldswapPool {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn swap_public(self: Self, context: &mut PublicContext,\n        amount0_in: Field,\n        amount0_out: Field,\n        amount1_in: Field,\n        amount1_out: Field,\n        nonce0: Field,\n        nonce1: Field,\n        to: Field,\n        should_call: bool,\n  ) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"swap_public(Field,Field,Field,Field,Field,Field,(Field),bool)\"),\n      [\n        amount0_in,\n        amount0_out,\n        amount1_in,\n        amount1_out,\n        nonce0,\n        nonce1,\n        to,\n        should_call as Field,\n      ],\n    );\n  }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/flash_loan/src/interfaces.nr"
      },
      "155": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\n// This is safe when reading from storage IF only correct safeu120 was written to storage\nfn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120 { value: fields[0] as u120 }\n}\n\nfn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/flash_loan/src/types/safe_u120_serialization.nr"
      }
    }
  }
}
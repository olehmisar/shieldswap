/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from "@aztec/aztec.js";
import AmmContractArtifactJson from "../target/Amm.json" assert { type: "json" };
export const AmmContractArtifact = AmmContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Amm;
 */
export class AmmContract extends ContractBase {
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO,
  ) {
    super(completeAddress, AmmContractArtifact, wallet, portalContract);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(
      address,
      AmmContract.artifact,
      wallet,
    ) as Promise<AmmContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(
    wallet: Wallet,
    admin: AztecAddressLike,
    token0: AztecAddressLike,
    token1: AztecAddressLike,
  ) {
    return new DeployMethod<AmmContract>(
      Point.ZERO,
      wallet,
      AmmContractArtifact,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(
    publicKey: PublicKey,
    wallet: Wallet,
    admin: AztecAddressLike,
    token0: AztecAddressLike,
    token1: AztecAddressLike,
  ) {
    return new DeployMethod<AmmContract>(
      publicKey,
      wallet,
      AmmContractArtifact,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return AmmContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** _assert_valid_swap(tokenIn: struct, tokenOut: struct, amountIn: field, amountOut: field) */
    _assert_valid_swap: ((
      tokenIn: AztecAddressLike,
      tokenOut: AztecAddressLike,
      amountIn: FieldLike,
      amountOut: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** _assert_valid_tokens(token0: struct, token1: struct) */
    _assert_valid_tokens: ((
      token0: AztecAddressLike,
      token1: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** _increase_reserves(amount0: field, amount1: field) */
    _increase_reserves: ((
      amount0: FieldLike,
      amount1: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** _init(admin: struct, token0: struct, token1: struct) */
    _init: ((
      admin: AztecAddressLike,
      token0: AztecAddressLike,
      token1: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** _update_reserves_after_swap(tokenIn: struct, tokenOut: struct, amountIn: field, amountOut: field) */
    _update_reserves_after_swap: ((
      tokenIn: AztecAddressLike,
      tokenOut: AztecAddressLike,
      amountIn: FieldLike,
      amountOut: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** add_liquidity(token0: struct, token1: struct, amount0: field, amount1: field, nonce0: field, nonce1: field) */
    add_liquidity: ((
      token0: AztecAddressLike,
      token1: AztecAddressLike,
      amount0: FieldLike,
      amount1: FieldLike,
      nonce0: FieldLike,
      nonce1: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** balance_of_private(owner: struct) */
    balance_of_private: ((
      owner: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((
      contract_address: FieldLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** get_reserves() */
    get_reserves: (() => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;

    /** swap(tokenIn: struct, tokenOut: struct, amountIn: field, amountOut: field, secret_hash: field, nonce: field) */
    swap: ((
      tokenIn: AztecAddressLike,
      tokenOut: AztecAddressLike,
      amountIn: FieldLike,
      amountOut: FieldLike,
      secret_hash: FieldLike,
      nonce: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, "selector">;
  };
}

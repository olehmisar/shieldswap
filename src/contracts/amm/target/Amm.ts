
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import AmmContractArtifactJson from './Amm.json' assert { type: 'json' };
export const AmmContractArtifact = AmmContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Amm;
 */
export class AmmContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, AmmContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, AmmContract.artifact, wallet) as Promise<AmmContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, admin: AztecAddressLike, token0: AztecAddressLike, token1: AztecAddressLike) {
    return new DeployMethod<AmmContract>(Point.ZERO, wallet, AmmContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, admin: AztecAddressLike, token0: AztecAddressLike, token1: AztecAddressLike) {
    return new DeployMethod<AmmContract>(publicKey, wallet, AmmContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return AmmContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _finalize_add_liquidity(token0: struct, token1: struct, amount0: field, amount1: field) */
    _finalize_add_liquidity: ((token0: AztecAddressLike, token1: AztecAddressLike, amount0: FieldLike, amount1: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _finalize_swap(token0: struct, token1: struct, amount0_in: field, amount0_out: field, amount1_in: field, amount1_out: field) */
    _finalize_swap: ((token0: AztecAddressLike, token1: AztecAddressLike, amount0_in: FieldLike, amount0_out: FieldLike, amount1_in: FieldLike, amount1_out: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _init(admin: struct, token0: struct, token1: struct) */
    _init: ((admin: AztecAddressLike, token0: AztecAddressLike, token1: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _transfer_if_not_zero(token0: struct, token1: struct, amount0: field, amount1: field, nonce0: field, nonce1: field, from: struct, to: struct) */
    _transfer_if_not_zero: ((token0: AztecAddressLike, token1: AztecAddressLike, amount0: FieldLike, amount1: FieldLike, nonce0: FieldLike, nonce1: FieldLike, from: AztecAddressLike, to: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** add_liquidity(token0: struct, token1: struct, amount0: field, amount1: field, nonce0: field, nonce1: field) */
    add_liquidity: ((token0: AztecAddressLike, token1: AztecAddressLike, amount0: FieldLike, amount1: FieldLike, nonce0: FieldLike, nonce1: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** balance_of_private(owner: struct) */
    balance_of_private: ((owner: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, serialized_note: array) */
    compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** reserves() */
    reserves: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** swap(token0: struct, token1: struct, amount0_in: field, amount0_out: field, amount1_in: field, amount1_out: field, nonce0: field, nonce1: field, secret_hash: field) */
    swap: ((token0: AztecAddressLike, token1: AztecAddressLike, amount0_in: FieldLike, amount0_out: FieldLike, amount1_in: FieldLike, amount1_out: FieldLike, nonce0: FieldLike, nonce1: FieldLike, secret_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** swap_public(amount0_in: field, amount0_out: field, amount1_in: field, amount1_out: field, nonce0: field, nonce1: field, to: struct, should_call: boolean) */
    swap_public: ((amount0_in: FieldLike, amount0_out: FieldLike, amount1_in: FieldLike, amount1_out: FieldLike, nonce0: FieldLike, nonce1: FieldLike, to: AztecAddressLike, should_call: boolean) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** tokens() */
    tokens: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}

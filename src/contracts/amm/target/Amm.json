{
  "name": "Amm",
  "functions": [
    {
      "name": "_assert_valid_swap",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "tokenIn",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "tokenOut",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amountIn",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amountOut",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_assert_valid_tokens",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_increase_reserves",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_init",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_update_reserves_after_swap",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "tokenIn",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "tokenOut",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amountIn",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amountOut",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_liquidity",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "balance_of_private",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VSQQrAMAhL69YyBnuL/UH//6p1TCGU3uYCoq0QYzADSHghVDP8r1vWb2gpjktZbx5xWn3Ym1Go7kHzS7w/yto97yMq7Yapf9l+8oOWzbhk4a33Kha3EySiOTEPSJMBD267DFLMzQIAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "reserves",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "tokenIn",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "tokenOut",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amountIn",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amountOut",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "tokens",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XT0+DQBDFly1/S0trPwmtX4C7Nw/em9h4NFG/fxTkhZ8T2piwiHNhd3Zn3psHLIN3zkXu21ZusAhXb8ZP/TzF/qa/1hMtBXaonMlXjqTPVYCz6qr6WnxY3FM5omcKnQPhHCP30xqMV6jb7iuw7uHzJrbV7gHryUhMOoLHePliN+hgY6lRYmqpp1mnEXEazIW1Nhzm5CIdlDc2XJbEzcLi1m2OHLh6LjLoLvwcPPKwPO75PrLeYgadndFZJqxrZ8MSXK6dDVrP4fMm1p4Nqov7Nv14NZK7hG/djzcjsdSoNLXU06zTiDgN5sLi2bD5B1ySP+Kie6K8a8NlSdxtWNzunKqAq2d0C92FX4HHPiyPU2F4tHbrPd6Dyy4sl2Ob8y5szk7nA/irVuGUWOc5fQhcWwRM5dWc/H7LtVyYawFfBZ/Wd/B5Uwf7Ne3P3Dz9auqG/ipUTvaWslvvzJz9Xfu91LPw/vH6dn65PF7Oz/ylig1FD2oc85OpdimGT59mttiKz+BTnhxrVp5g9du89v9R9gmGjfjwfA4AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "",
      "",
      "eJztnd2O4zYWhN/F14MF/ynOqyz2YrDJAgGCyWJn7gb97lE3RpRiHbJimzo81OoqHUAafS7ZVTyyVP5x+/2Pf3/5/tsfX7/dPv+42dvnf/64ffvvl6/v//ft+5f/fb99Vp9uv379Zf7v26fbf377/dfbZ/32abeVdjaEn1vOf09T3jpFanNvtF429yaAzVOMy8bK+BVEqbd/fbq5MbE9I7Z1PmM75V/BDhT2jLMcwE4+1OFtimY5gE1TXGnS0ZpHdviGyk8vwzul8wGcctMWfj5AanAA5SoH0KrBEXzKR9AuAf2dn/Kbx0Xt7oE0O1DS+Q3hkjX3QEYaEBkKPYFIu+8JRBp5T6DXLbox0Ou22xiohZU2BWphvS2BDL9TA6AOTh3MChTTPVAHp64DdXDqOlAHp64DdXDqOlAHp64DdXDqOlAHp64DdXDqKpDt4NR1IHan9krbPGQpq+6B2J0aAbE7NQJid2oExO7UCIjdqREQu1MjIHanRkDsTg2AHLtTIyB+p3YmX4Dyzt1fjnH8Tg2A+J0aAPE7NQDid2oAxO/UAIjfqQEQv1MDIH6nrgN5fqcGQB2celqjY86Re6AOTl0H6uDUdaAOTl0H6uDUdaAOTl0H6uDUdaAOTl0H6uDUVaDQwanrQPxO7d0aHT74eyB+pwZA/E4NgPidGgDxOzUA4ndqAMTv1ACI36kBEL9T14Eiv1MDIHanDi7lm1GC333FGdmdOswBloGCivdA7E4dgnUrUNydMnanjiplhaJ2O4XYnTrq/G/raMz9Jb3I7tTR2CkD2d16KLI7dbQ6bx7d7pavyO7U0dn8fVn06v6muMju1HFew65AHmwe3LLeDZubL7W11LbWLB+X2eDs+g8/cbcje16MIQt7aj0oy7S81+MmT2hZtE5rIBqlwd2xTuV7aZ3ehtUTKrJH7YEqGj1lEmNsqAuj1WSz6HO6vaYj+wrhpDryL2zOqSP/euycOvIvI8+pI//q95w68i/az6mj9FljEB2T9OFkFB3PNM301PGaZ9roeM0zbXS85pk2Ol7zTBsdr3mmjY7XPNNGx1PNM9bkMopZRoN0tC5/HaKceqnPIZ1qnumn4/yfS8g2Qp5qoukp5KlGmp5Cnmqm6SnkqYaankKeaqrpKeSpxpqeQp5qrukp5DXYNBLymmzaCMnfOXdWIa/JppGQ12TTSMhrsmkk5Kkmm5jWy7rT9hmCZ5QRPqr4abmxOHoLlEEvlR4mklronVL1lxpyL9S0uZdXv7+Xd9tOXi0STv6vjzEQorTsANaFOkoZL7RhX7Au1Fwe9kLzw0STn+6fA9GFisvDYGyswBTqLQ+DSXnjMNn6WyDpaXkHJKv35PQqTAS5z21Dye/KhnShMHMEcnqdMQI5HewjkNPBOwI5c442JGcOxobkzEnXkJw5FtuRF4pHRyCXnKFBZfJ4/7ixLlSZjkAuOUPr5JIztE4uOUPr5JIztE4uOUPr5JIztE4uOUOr5IVK2BHIBWdoyBeLUjC73yAqlMyOQC44QwG54AwF5IIzFJALzlBALjhDAbngDAXkgjO0Tl4o6x2BXG6GaqXWryOVcnbHLjdFMbvcHMXscpMUs8vNUswuN00xu9w8xexyExWzy81UyF4oVh6DXXSu5ntZtHr/ov6eXXSuAnbRuQrYRecqYBedq4BddK4CdtG5CthF5ypgF52rdfZCDfYY7JJzVbt1TTC7+Y5dcq4idsm5itgl5ypil5yriF1yriJ2ybmK2CXnKmKXnKuAvVAXPga74Fw169fA89+7H3vWhSbtMdgF5ypkF5yrkF1wrkJ2wbkK2QXnKmQXnKuQXXCuIvZC0+0Y7JJzNaj87JYJbvfdcKHRVQh7WB9VjWZ3/b3QoiqDPa7PzZo47dkl5+qkVvZpW1j4k11wrlrj8xOc1u5+BEkXGjplsG8ezbZ2/zRhoRVTCPv6NLR128fKf7ILzlXr8tPN2vrdr8HpQvujDHaf8s/E2hDus8kUChdlsEe96h6Nrm++/h7u9rfNtKU4Gv4Qlik0LV4K/n0FBa8xHlPQm+Wf9i4CBWPKbh6TV3UFG/7mmCkUMZ5c7im65fVNcQKFBsan5fc/TXit5sEowSu5A+Wej75wJPdSf4Qp9DQOqKDLpjnHMlAQiUIuVJ3SIfuEtg1F6VWTYuhORCEvtGFNiqE7C497obWaFEP3/h0HU6tJMXR33nEwzWpSDF1WJ4O8+nC6odvhhiAn1zdDkJNLhSHIyYgegpw5RxuSMwdjQ3LmpGtIzhyL7cjpqrEhyCVnaO3hdENXjQ1BLjlD6+SSM7ROLjlD6+SSM7ROLjlD6+SSM7ROLjlDq+R01dgQ5IIztPpwuqGrxoYgF5yhgFxwhgJywRkKyAVnKCAXnKGAXHCGAnLBGVonp6vGhiCXm6HoUXRDl40Nwi43RzG73CTF7HKzFLPLTVPMLjdPMbvcRMXscjMVstPlY4Owi87V6qPohq4fG4RddK4CdtG5CthF5ypgF52rgF10rgJ20bkK2EXnap2drh8bhF1yrtYfRTd0/dgg7JJzFbFLzlXELjlXEbvkXEXsknMVsUvOVcQuOVcBO10/Ngi74FwFj6Ibun5sEHbBuQrZBecqZBecq5BdcK5CdsG5CtkF5ypkF5yriJ2uHxuEXXKu1mtSDF0/JoW9WpNi6PoxIez1mhRD148JYa/XpBi6fkwGO6hJMXT9mBD2ek2KoevHpLBXa1IMXT8mhL1ek2Lo+jEh7KAmha4fE8I+RMkHXYI2ooJDlHzQvW1nl7tbyQddNXd6uRuWfNCFdyMq2LDkg27Sc9osb1w3b1IVRdsU8yrUpimCl9q0uoMu0zsUv2UhB92n9xD+/P7Nh5jtfbeOpmvvHjyEctVD0Muuxw7h86rUaZfASXB+yu8hF/X9BXRLd84dSpR0flu4ZO+X1ZbucOtKROd3TyI64noS0ZHRk+h1v25N9LoFtyZq4aptiVqYcFsifs8GRIUKpkOJ8npu/nt3udgWqpV6EnXwbEDUwbMBUQfPBkQdPBsQdfBsQNTBswFRB88GRB08u05UqPw5kMir3OQz/72r8rGFKp+eROyeDYnYPRsSsXs2JGL3bEjE7tmQiN2zIRG7Z0Mids9GRIWKmSOJnMmXqLxzu6s1heqYnkT8no2I+D0bEfF7NiLi92xExO/ZiIjfsxERv2cjIn7PBkSFSpNDiaY1ReZI2RF18GxA1MGzAVEHzwZEHTwbEHXwbEDUwbMBUQfPBkQdPBsQdfDsOlGhMONIIu/WFPHh/vY4W6jB6EnE79mIiN+zERG/ZyMifs9GRPyejYj4PRsR8Xs2IuL3bEBUKGM4kCi4lO9kCX7/rWihYuFIovVne3QI6r7o1xaKE44kCtatRLvbvm2hDuFAoqhS1ihqt9eI3bPjfN4ykTG7q36F6oIjiYydMpHdr48KhQRHElmdN49uf9dYoWbgSCJn8/dr0e8egrGF8oAjieZl7UrkwebBLUvg7e3N+v1G/v227W71t4Vigv97XQqlB3J0yX1CUUWgi9ZpjUajNjdcH/1ogy30L4wpo9FTJjFm+5AgpYxWk82qzyn3opDsa4WzCsm/xDmpkPwrs5MKyb+gPKmQ/OvgkwrJv3w/qZDSp45hhJQ+powiZKF05hLyYSGvyaaRkNdk00jIa7JpJOQ12TQS8ppsGgl5TTaNhDzVZLMpz5p1NEhIu/azKadeqouwhXKrS8iHhTzVZNNRyELt1yXkw0KearLpKeSpJpueQp5qsukp5Kkmm55Cnmqy6SnkqSabnkJek00jIa/JppGQ12TTREjH38F3ViGvyaaRkNdk00jIU002cS3EN9P26YJnlBE+qvhcoB+9BcrUX+r0DzIoq/gfu9E9f39jP9IGdX4Qw+jNqdb+fSetCnv5uBwrbD452oRlL9Ip4F7kxwLuRb5l4F7kKFffSxfOmbO5TlqFjYZ5r0I1I9ztiTNmSqesfjRTOmd4N9rL4G70Bx3uRk/gtd2Meua0ve/1xGn72O3x02aKn7T60YofNbzb46fNFD9seLcnTluK9Gmrfkbf96JPG97tidOW0jMG+bHb4w75sdvjFvmx2+Me+bHboyb59vYnpHBNXg==",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUY5zUZ5zUZ5zUZ5zUZ5zVfSmMn47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47wm47w2xnltjPPaGOe1Mc5reymN3RjntTHOa2Oc18Y4r41xXhvjvDbGeW2M89oY57UxzmtjnNfGOK+NcV4b47w2xnltjPPaGOe1Mc5rY5zXxjivjXFeG+O8NsZ5bYzz2hjntTHOa2Oc18Y4r41xXhvjvDbGeW2M89oY57UxzmtjnNfGOK+NcV4b47w2xnltjPPaGOe1Mc5rY5zXxjivjXFeG+O8tovOa71+WjJefW3JtcbeueRaY+9ccq2xdy651tg7l1xr7J1LrjX2ziXXGnvnkmuNvXHJRed15xKmsRed151LmMZedF53LmEae9F53bmEaexF53XnEqaxF53XnUuYxl50XncuYRp70XnduYRp7EXndecSprEXndedS5jGXnRedy5hGnvRed25hGnsRed15xKmsRed151LmMZedF53LmEae9F53bmEaexF53XnEqaxF53XnUuYxl50XncuYRp70XnduURp7H7Red25RGnsftF53blEaez+Uhq7X3Redy5RGrtfdF53LlEau190Xjcuuei87lzCNPai87pzCdPYi87rziVMYy86rzuXMI296LzuXMI09qLzunMJ09iLzuvOJUxjLzqvO5cwjb3ovO5cwjT2ovO6cwnT2IvO684lTGMvOq87lzCNvei87lzCNPai87pzCdPYi87rziVMYy86rzuXMI296LzuXMI09qLzunMJ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"
    ],
    "fileMap": {
      "1": {
        "source": "mod interfaces;\nmod utils;\n\ncontract Amm {\n    use crate::interfaces::Token;\n\n    // TODO: switch to dep\n    use crate::utils::tokens_are_in_order;\n    // use dep::token_ordering::tokens_are_in_order;\n\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n    use dep::value_note::{\n        value_note::{ValueNote, ValueNoteMethods, VALUE_NOTE_LEN},\n        utils as value_note_utils,\n        balance_utils,\n    };\n    use dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        oracle::get_secret_key::get_secret_key, // used to compute nullifier\n        selector::compute_selector, // used to compute function selector for calling a function\n        state_vars::{singleton::Singleton, map::Map, public_state::PublicState, set::Set},\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n            field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n    };\n    use dep::safe_math::SafeU120;\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit,\n            assert_current_call_valid_authwit_public,\n        },\n    };\n\n    struct Storage {\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token0: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token1: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        reserve0: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        reserve1: PublicState<Field, FIELD_SERIALIZED_LEN>,\n        // balances: Map<EasyPrivateUint>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Self {\n                admin: PublicState::new(context, 1, AztecAddressSerializationMethods),\n                token0: PublicState::new(context, 2, AztecAddressSerializationMethods),\n                token1: PublicState::new(context, 3, AztecAddressSerializationMethods),\n                reserve0: PublicState::new(context, 4, FieldSerializationMethods),\n                reserve1: PublicState::new(context, 5, FieldSerializationMethods),\n                // balances: Map::new(context, 6, |context, slot| { EasyPrivateUint::new(context, slot) }),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_init((Field),(Field),(Field))\"),\n            [admin.address, token0.address, token1.address]\n        );\n    }\n    #[aztec(public)]\n    fn _init(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        assert(token0.address != 0, \"token0 address is not valid\"); // sufficient chekc\n        assert(tokens_are_in_order(token0, token1), \"token0 must be less than token1\");\n        storage.admin.write(admin);\n        storage.token0.write(token0);\n        storage.token1.write(token1);\n        storage.reserve0.write(0);\n        storage.reserve1.write(0);\n    }\n\n    #[aztec(private)]\n    fn add_liquidity(\n        token0: AztecAddress,\n        token1: AztecAddress,\n        amount0: Field,\n        amount1: Field,\n        nonce0: Field,\n        nonce1: Field\n    ) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_assert_valid_tokens((Field),(Field))\"),\n            [token0.address, token1.address]\n        );\n        let sender = context.msg_sender();\n        Token::at(token0.address).unshield(&mut context, sender, context.this_address(), amount0, nonce0);\n        Token::at(token1.address).unshield(&mut context, sender, context.this_address(), amount1, nonce1);\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_increase_reserves(Field,Field)\"),\n            [amount0, amount1]\n        );\n        // // TODO: use K formula\n        // storage.balances.at(sender).add((amount0 + amount1), sender);\n    }\n\n    #[aztec(private)]\n    fn swap(\n        tokenIn: AztecAddress,\n        tokenOut: AztecAddress,\n        amountIn: Field,\n        amountOut: Field,\n        secret_hash: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_assert_valid_swap((Field),(Field),Field,Field)\"),\n            [tokenIn.address, tokenOut.address, amountIn, amountOut]\n        );\n\n        let sender = context.msg_sender();\n        Token::at(tokenIn.address).unshield(&mut context, sender, context.this_address(), amountIn, nonce);\n        Token::at(tokenOut.address).shield(&mut context, context.this_address(), amountOut, secret_hash, 0);\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_update_reserves_after_swap((Field),(Field),Field,Field)\"),\n            [tokenIn.address, tokenOut.address, amountIn, amountOut]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _assert_valid_tokens(token0: AztecAddress, token1: AztecAddress) {\n        assert(token0.address == storage.token0.read().address, \"token0 address is not valid\");\n        assert(token1.address == storage.token1.read().address, \"token1 address is not valid\");\n    }\n\n    #[aztec(public)]\n    internal fn _increase_reserves(amount0: Field, amount1: Field) {\n        storage.reserve0.write(storage.reserve0.read() + amount0);\n        storage.reserve1.write(storage.reserve1.read() + amount1);\n    }\n\n    #[aztec(public)]\n    internal fn _assert_valid_swap(tokenIn: AztecAddress, tokenOut: AztecAddress, amountIn: Field, amountOut: Field) {\n        assert(amountIn != 0, \"amountIn must be greater than 0\");\n        assert(amountOut != 0, \"amountOut must be greater than 0\");\n\n        let mut token0 = storage.token0.read();\n        let mut token1 = storage.token1.read();\n        assert(\n            (((token0.address == tokenIn.address) & (token1.address == tokenOut.address))\n            | ((token0.address == tokenOut.address) & (token1.address == tokenIn.address))), \"invalid tokenIn or tokenOut\"\n        );\n\n        let reserve0 = storage.reserve0.read();\n        let reserve1 = storage.reserve1.read();\n        let mut reserveIn = reserve0;\n        let mut reserveOut = reserve1;\n        if (tokenIn.address == token1.address) {\n            reserveIn = reserve1;\n            reserveOut = reserve0;\n        }\n\n        let expectedAmountOut = (reserveOut * amountIn) / (reserveIn + amountIn);\n        // TODO: this truncates integers and is NOT correct. Compare K before and after instead\n        assert(amountOut as u120 <= expectedAmountOut as u120, \"amountOut is greater than expected\");\n    }\n\n    #[aztec(public)]\n    internal fn _update_reserves_after_swap(tokenIn: AztecAddress, tokenOut: AztecAddress, amountIn: Field, amountOut: Field) {\n        let mut reserve0 = storage.reserve0.read();\n        let mut reserve1 = storage.reserve1.read();\n        let token0 = storage.token0.read();\n        if (tokenIn.address == token0.address) {\n            reserve0 += amountIn;\n            reserve1 -= amountOut;\n        } else {\n            reserve1 += amountIn;\n            reserve0 -= amountOut;\n        }\n        storage.reserve0.write(reserve0);\n        storage.reserve1.write(reserve1);\n    }\n\n    unconstrained fn reserves() -> [u120; 2] {\n        [SafeU120::new(storage.reserve0.read()).value, SafeU120::new(storage.reserve1.read()).value]\n    }\n\n    unconstrained fn tokens() -> [AztecAddress; 2] {\n        [storage.token0.read(), storage.token1.read()]\n    }\n\n    unconstrained fn balance_of_private(owner: AztecAddress) -> u120 {\n        // balance_utils::get_balance(storage.balances.at(owner.address).set)\n        0\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; VALUE_NOTE_LEN]\n    ) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, serialized_note)\n    }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/main.nr"
      },
      "22": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "23": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "27": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "38": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "80": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "97": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "98": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "99": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "100": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "109": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "113": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "115": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "116": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "122": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "123": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "126": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "130": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "132": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "133": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "138": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "147": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/aztec/types/type_serialization/field_serialization.nr"
      },
      "149": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "150": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "155": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(serialized_note)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "157": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "162": {
        "source": "use dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n  types::address::AztecAddress,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn shield(self: Self, context: &mut PrivateContext, from: Field, amount: Field, secret_hash: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"shield((Field),Field,Field,Field)\"),\n      [from, amount, secret_hash, nonce]\n    );\n  }\n\n  pub fn unshield(self: Self, context: &mut PrivateContext, from: Field, to: Field,  amount: Field, nonce: Field) {\n    context.call_private_function(\n      self.address,\n      compute_selector(\"unshield((Field),(Field),Field,Field)\"),\n      [from, to, amount, nonce]\n    );\n  }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/interfaces.nr"
      },
      "163": {
        "source": "use dep::aztec::types::address::{AztecAddress};\n\npub fn tokens_are_in_order(tokenA: AztecAddress, tokenB: AztecAddress) -> bool {\n    let a = tokenA.address.to_be_bytes(32);\n    let b = tokenB.address.to_be_bytes(32);\n    assert((a.len() == 32) & (b.len() == 32), \"addresses are not 32 bytes\");\n    let mut in_order = false;\n    for i in 0..32 {\n        if ((a[i] < b[i]) & (!in_order)) {\n            in_order = true;\n        }\n    }\n    in_order & (tokenA.address != tokenB.address)\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/utils.nr"
      }
    }
  }
}
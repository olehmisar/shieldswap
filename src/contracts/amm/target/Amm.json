{
  "name": "Amm",
  "functions": [
    {
      "name": "_finalize_add_liquidity",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_finalize_swap",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount0_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_init",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_transfer_if_not_zero",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "from",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "to",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_liquidity",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "balance_of_private",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VSQQrAMAhL69YyBnuL/UH//6p1TCGU3uYCoq0QYzADSHghVDP8r1vWb2gpjktZbx5xWn3Ym1Go7kHzS7w/yto97yMq7Yapf9l+8oOWzbhk4a33Kha3EySiOTEPSJMBD267DFLMzQIAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "reserves",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XTU/DMAyGk6yfW/fJfkiH4N5/gMSR2yQmjkjAYT8fWmrtwXQTUl06X5I4sd/Xbuq6wTnn3bdM3Ek8xqDmT+06wfmqHcuekgDbymf85SNufeXgLHEt2liCLe7drCOfCfJshLPz7qdUmE8Qtz6XYz9AF5RtnbsH7McdNkkHHu1FF7lTHrQtcxSrWMp+0uSIOBXWgjVVHIbkInkQv5HiMiZuaotb1j4y4Mq9SJF3wc/AIzfm4RWPo/tdFwbAvWcdYHxTW5yLdUCwztWkMbicq0nclzEoW12TinbOmjRv55MO3wV0kpN5hy1zVKhYyn7S5Ig4FdYF4vWK35hcsn/iwntaYV1cAe7CFrepj0vgyh1dYC34S/BYGfPwiscRuCvgbmxxb3P4F7lUPzbgsrblsqt93tj6bJ7vFvwlVsGZYZ/fh61xbB6Y4lfW5PdXrsuRuebQraCT/TV0QcXB/lTOp26Y/jxxp37Syid7aZFL78yQ/Wx9Z6VOvn+8vu1fDo+H/TN/ISNFMYAa5/xUS3sYQSevB9s2sU+hEz8Z9nR6zOLXfvX/ssgnVMt5y2wPAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount0_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount0_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount0_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "to",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "should_call",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "tokens",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XT0+DQBDFly1/S0trPwmtX4C7Nw/em9h4NFG/fxTkhZ8T2piwiHNhd3Zn3psHLIN3zkXu21ZusAhXb8ZP/TzF/qa/1hMtBXaonMlXjqTPVYCz6qr6WnxY3FM5omcKnQPhHCP30xqMV6jb7iuw7uHzJrbV7gHryUhMOoLHePliN+hgY6lRYmqpp1mnEXEazIW1Nhzm5CIdlDc2XJbEzcLi1m2OHLh6LjLoLvwcPPKwPO75PrLeYgadndFZJqxrZ8MSXK6dDVrP4fMm1p4Nqov7Nv14NZK7hG/djzcjsdSoNLXU06zTiDgN5sLi2bD5B1ySP+Kie6K8a8NlSdxtWNzunKqAq2d0C92FX4HHPiyPU2F4tHbrPd6Dyy4sl2Ob8y5szk7nA/irVuGUWOc5fQhcWwRM5dWc/H7LtVyYawFfBZ/Wd/B5Uwf7Ne3P3Dz9auqG/ipUTvaWslvvzJz9Xfu91LPw/vH6dn65PF7Oz/ylig1FD2oc85OpdimGT59mttiKz+BTnhxrVp5g9du89v9R9gmGjfjwfA4AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "",
      "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",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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",
      "",
      "eJzN10FqwzAQheG7aG2KNJqRJV+ldGHaFALBKbV3xndPA2rTYqneCOntEpiBP8F8g1d1ub6Oy/k6zWpYlX4SNTyvav4Yp/v3eRk/FzWEQNKp0/R2/8hu69T7+XJSg9m63awhR3HWWGsfs9Ynpq1wHLZBfs3q7aX7qnFQNT1UjYeqCVA1RmPlGKwcwsqxWDmMlYMlssEi2WCZbLBQNlgqE5bKhKUyYalMWCoTlspUWWXWJg4z6T85+1mSEGfJ+ccsh5heWfCS6ZW1L5meuQzsf9JdqPj8Zi5DoxybuQytcjKXoVVO5jK0yslchlY5mcvQKidzGVrlZLRvlZMRvFUOlsoWS2XGUpmxVGYslRlLZcZSmbFUZiyVGUtlxlKZsVQWLJUFS2XBUlmwVJbKKhd8gZbKgpdMr6x9wfQ++a+T7r+XmPdPWZ/8vUdLyRt0tJS8FEdLSc8PlnxS3X+Wtu0GjFcRWw=="
    ],
    "fileMap": {
      "1": {
        "source": "mod interfaces;\nmod types;\nmod utils;\n\ncontract Amm {\n    // TODO: switch to dep\n    use crate::utils::tokens_are_in_order;\n    // use dep::token_ordering::tokens_are_in_order;\n\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n    use dep::value_note::{\n        value_note::{ValueNote, ValueNoteMethods, VALUE_NOTE_LEN},\n        utils as value_note_utils,\n        balance_utils,\n    };\n    use dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        oracle::get_secret_key::get_secret_key, // used to compute nullifier\n        selector::compute_selector, // used to compute function selector for calling a function\n        state_vars::{singleton::Singleton, map::Map, public_state::PublicState, set::Set},\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n            field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n    };\n    use dep::safe_math::SafeU120;\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit,\n            assert_current_call_valid_authwit_public,\n        },\n    };\n\n    use crate::types::safe_u120_serialization::{SAFE_U120_SERIALIZED_LEN, SafeU120SerializationMethods};\n    use crate::interfaces::{ShieldswapCalee, Token};\n\n    struct Storage {\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token0: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token1: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        reserve0: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        reserve1: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        // balances: Map<EasyPrivateUint>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Self {\n                admin: PublicState::new(context, 1, AztecAddressSerializationMethods),\n                token0: PublicState::new(context, 2, AztecAddressSerializationMethods),\n                token1: PublicState::new(context, 3, AztecAddressSerializationMethods),\n                reserve0: PublicState::new(context, 4, SafeU120SerializationMethods),\n                reserve1: PublicState::new(context, 5, SafeU120SerializationMethods),\n                // balances: Map::new(context, 6, |context, slot| { EasyPrivateUint::new(context, slot) }),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_init((Field),(Field),(Field))\"),\n            [admin.address, token0.address, token1.address]\n        );\n    }\n    #[aztec(public)]\n    fn _init(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        assert(\n            (token0.address != 0) & (tokens_are_in_order(token0, token1)), \"Shieldswap: INVALID_TOKEN_ADDRESSES\"\n        );\n        storage.admin.write(admin);\n        storage.token0.write(token0);\n        storage.token1.write(token1);\n        storage.reserve0.write(SafeU120::min());\n        storage.reserve1.write(SafeU120::min());\n    }\n\n    #[aztec(private)]\n    fn add_liquidity(\n        token0: AztecAddress, token1: AztecAddress, amount0: Field, amount1: Field, nonce0: Field, nonce1: Field\n    ) {\n        let sender = context.msg_sender();\n        Token::at(token0.address).unshield(&mut context, sender, context.this_address(), amount0, nonce0);\n        Token::at(token1.address).unshield(&mut context, sender, context.this_address(), amount1, nonce1);\n\n        // // TODO: use K formula\n        // storage.balances.at(sender).add((amount0 + amount1), sender);\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_finalize_add_liquidity((Field),(Field),Field,Field)\"),\n            [token0.address, token1.address, amount0, amount1]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _finalize_add_liquidity(token0: AztecAddress, token1: AztecAddress, amount0: Field, amount1: Field) {\n        assert(\n            (token0.address == storage.token0.read().address)\n            & (token1.address == storage.token1.read().address), \"Shieldswap: INVALID_TOKEN_ADDRESSES\"\n        );\n        assert((amount0 != 0) & (amount1 != 0), \"Shieldswap: INSUFFICIENT_LIQUIDITY_MINTED\");\n        storage.reserve0.write(storage.reserve0.read().add(SafeU120::new(amount0)));\n        storage.reserve1.write(storage.reserve1.read().add(SafeU120::new(amount1)));\n    }\n\n    #[aztec(public)]\n    fn swap_public(\n        amount0_in: Field,\n        amount0_out: Field,\n        amount1_in: Field,\n        amount1_out: Field,\n        nonce0: Field,\n        nonce1: Field,\n        to: AztecAddress,\n        should_call: bool\n    ) {\n        let token0 = storage.token0.read();\n        let token1 = storage.token1.read();\n\n        let from = context.msg_sender();\n        let this = context.this_address();\n\n        // optimistically transfer tokens out\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_transfer_if_not_zero((Field),(Field),Field,Field,Field,Field,(Field),(Field))\"),\n            [token0.address, token1.address, amount0_out, amount1_out, 0, 0, this, to.address]\n        );\n\n        if (should_call) {\n            ShieldswapCalee::at(to.address).shieldswap_call(&mut context, amount0_out, amount1_out);\n        }\n\n        // transfer tokens in\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_transfer_if_not_zero((Field),(Field),Field,Field,Field,Field,(Field),(Field))\"),\n            [token0.address, token1.address, amount0_in, amount1_in, nonce0, nonce1, from, this]\n        );\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_finalize_swap((Field),(Field),Field,Field,Field,Field)\"),\n            [token0.address, token1.address, amount0_in, amount0_out, amount1_in, amount1_out]\n        );\n    }\n\n    // this is needed because the compiler allows only up to 4 public calls per function\n    #[aztec(public)]\n    internal fn _transfer_if_not_zero(\n        token0: AztecAddress,\n        token1: AztecAddress,\n        amount0: Field,\n        amount1: Field,\n        nonce0: Field,\n        nonce1: Field,\n        from: AztecAddress,\n        to: AztecAddress\n    ) {\n        if amount0 != 0 {\n            Token::at(token0.address).transfer_public(&mut context, from.address, to.address, amount0, nonce0);\n        }\n        if amount1 != 0 {\n            Token::at(token1.address).transfer_public(&mut context, from.address, to.address, amount1, nonce1);\n        }\n    }\n\n    #[aztec(private)]\n    fn swap(\n        token0: AztecAddress,\n        token1: AztecAddress,\n        amount0_in: Field,\n        amount0_out: Field,\n        amount1_in: Field,\n        amount1_out: Field,\n        nonce0: Field,\n        nonce1: Field,\n        secret_hash: Field\n    ) {\n        let from = context.msg_sender();\n        let this = context.this_address();\n        // optimistically transfer tokens out\n        // TODO: with if statements this is not compiling (compiler bug probably)\n        // if amount0_out != 0 {\n        Token::at(token0.address).shield(&mut context, this, amount0_out, secret_hash, 0);\n        // }\n        // if amount1_out != 0 {\n        Token::at(token1.address).shield(&mut context, this, amount1_out, secret_hash, 0);\n        // }\n\n        // transfer tokens in\n        if amount0_in != 0 {\n            Token::at(token0.address).unshield(&mut context, from, this, amount0_in, nonce0);\n        }\n        if amount1_in != 0 {\n            Token::at(token1.address).unshield(&mut context, from, this, amount1_in, nonce1);\n        }\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_finalize_swap((Field),(Field),Field,Field,Field,Field)\"),\n            [token0.address, token1.address, amount0_in, amount0_out, amount1_in, amount1_out]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _finalize_swap(\n        token0: AztecAddress,\n        token1: AztecAddress,\n        amount0_in: Field,\n        amount0_out: Field,\n        amount1_in: Field,\n        amount1_out: Field\n    ) {\n        assert(\n            (token0.address == storage.token0.read().address)\n            & (token1.address == storage.token1.read().address), \"Shieldswap: INVALID_TOKEN_ADDRESSES\"\n        );\n        assert((amount0_in != 0) | (amount1_in != 0), \"Shieldswap: INSUFFICIENT_INPUT_AMOUNT\");\n        assert((amount0_out != 0) | (amount1_out != 0), \"Shieldswap: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        let reserve0 = storage.reserve0.read();\n        let reserve1 = storage.reserve1.read();\n\n        let reserve0_after = reserve0.add(SafeU120::new(amount0_in)).sub(SafeU120::new(amount0_out));\n        let reserve1_after = reserve1.add(SafeU120::new(amount1_in)).sub(SafeU120::new(amount1_out));\n\n        // validate amount_out\n        let k_before = reserve0.mul(reserve1);\n        let k_after = reserve0_after.mul(reserve1_after);\n        assert(k_after.ge(k_before), \"Shieldswap: K\");\n\n        // update reserves\n        storage.reserve0.write(reserve0_after);\n        storage.reserve1.write(reserve1_after);\n    }\n\n    unconstrained fn reserves() -> [u120; 2] {\n        [storage.reserve0.read().value, storage.reserve1.read().value]\n    }\n\n    unconstrained fn tokens() -> [AztecAddress; 2] {\n        [storage.token0.read(), storage.token1.read()]\n    }\n\n    unconstrained fn balance_of_private(owner: AztecAddress) -> u120 {\n        // balance_utils::get_balance(storage.balances.at(owner.address).set)\n        0\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; VALUE_NOTE_LEN]\n    ) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, serialized_note)\n    }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/main.nr"
      },
      "22": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "23": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "27": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "38": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "80": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "97": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "98": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "99": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "100": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "109": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "113": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "115": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "116": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "122": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "123": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "126": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "128": {
        "source": "use dep::protocol_types::constants::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/public_call.nr"
      },
      "130": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "132": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "133": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "134": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
        "path": "/aztec/selector.nr"
      },
      "138": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "144": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "149": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "150": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "155": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(serialized_note)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "157": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "162": {
        "source": "use dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n  types::address::AztecAddress,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn shield(self: Self, context: &mut PrivateContext, from: Field, amount: Field, secret_hash: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"shield((Field),Field,Field,Field)\"),\n      [from, amount, secret_hash, nonce]\n    );\n  }\n\n  pub fn unshield(self: Self, context: &mut PrivateContext, from: Field, to: Field,  amount: Field, nonce: Field) {\n    context.call_private_function(\n      self.address,\n      compute_selector(\"unshield((Field),(Field),Field,Field)\"),\n      [from, to, amount, nonce]\n    );\n  }\n\n  pub fn transfer_public(self: Self, context: &mut PublicContext, from: Field, to: Field, amount: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"transfer_public((Field),(Field),Field,Field)\"),\n      [from, to, amount, nonce]\n    );\n  }\n\n}\n\nstruct ShieldswapCalee {\n  address: Field,\n}\n\nimpl ShieldswapCalee {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn shieldswap_call(self: Self, context: &mut PublicContext, amount0: Field, amount1: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"shieldswap_call(Field,Field)\"),\n      [amount0, amount1]\n    );\n  }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/interfaces.nr"
      },
      "164": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\n// This is safe when reading from storage IF only correct safeu120 was written to storage\nfn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120 { value: fields[0] as u120 }\n}\n\nfn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/types/safe_u120_serialization.nr"
      },
      "165": {
        "source": "use dep::aztec::types::address::{AztecAddress};\n\npub fn tokens_are_in_order(tokenA: AztecAddress, tokenB: AztecAddress) -> bool {\n    let a = tokenA.address.to_be_bytes(32);\n    let b = tokenB.address.to_be_bytes(32);\n    assert((a.len() == 32) & (b.len() == 32), \"addresses are not 32 bytes\");\n    let mut in_order = false;\n    for i in 0..32 {\n        if ((a[i] < b[i]) & (!in_order)) {\n            in_order = true;\n        }\n    }\n    in_order & (tokenA.address != tokenB.address)\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/utils.nr"
      }
    }
  }
}
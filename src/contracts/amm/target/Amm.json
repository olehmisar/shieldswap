{
  "name": "Amm",
  "functions": [
    {
      "name": "_finalize_add_liquidity",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_finalize_swap",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token_in",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token_out",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_init",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_liquidity",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "balance_of_private",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VSQQrAMAhL69YyBnuL/UH//6p1TCGU3uYCoq0QYzADSHghVDP8r1vWb2gpjktZbx5xWn3Ym1Go7kHzS7w/yto97yMq7Yapf9l+8oOWzbhk4a33Kha3EySiOTEPSJMBD267DFLMzQIAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "reserves",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XTU/DMAyGk6yfW/fJfkiH4N5/gMSR2yQmjkjAYT8fWmrtwXQTUl06X5I4sd/Xbuq6wTnn3bdM3Ek8xqDmT+06wfmqHcuekgDbymf85SNufeXgLHEt2liCLe7drCOfCfJshLPz7qdUmE8Qtz6XYz9AF5RtnbsH7McdNkkHHu1FF7lTHrQtcxSrWMp+0uSIOBXWgjVVHIbkInkQv5HiMiZuaotb1j4y4Mq9SJF3wc/AIzfm4RWPo/tdFwbAvWcdYHxTW5yLdUCwztWkMbicq0nclzEoW12TinbOmjRv55MO3wV0kpN5hy1zVKhYyn7S5Ig4FdYF4vWK35hcsn/iwntaYV1cAe7CFrepj0vgyh1dYC34S/BYGfPwiscRuCvgbmxxb3P4F7lUPzbgsrblsqt93tj6bJ7vFvwlVsGZYZ/fh61xbB6Y4lfW5PdXrsuRuebQraCT/TV0QcXB/lTOp26Y/jxxp37Syid7aZFL78yQ/Wx9Z6VOvn+8vu1fDo+H/TN/ISNFMYAa5/xUS3sYQSevB9s2sU+hEz8Z9nR6zOLXfvX/ssgnVMt5y2wPAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token_in",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token_out",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount_in",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount_out",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "tokens",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XT0+DQBDFly1/S0trPwmtX4C7Nw/em9h4NFG/fxTkhZ8T2piwiHNhd3Zn3psHLIN3zkXu21ZusAhXb8ZP/TzF/qa/1hMtBXaonMlXjqTPVYCz6qr6WnxY3FM5omcKnQPhHCP30xqMV6jb7iuw7uHzJrbV7gHryUhMOoLHePliN+hgY6lRYmqpp1mnEXEazIW1Nhzm5CIdlDc2XJbEzcLi1m2OHLh6LjLoLvwcPPKwPO75PrLeYgadndFZJqxrZ8MSXK6dDVrP4fMm1p4Nqov7Nv14NZK7hG/djzcjsdSoNLXU06zTiDgN5sLi2bD5B1ySP+Kie6K8a8NlSdxtWNzunKqAq2d0C92FX4HHPiyPU2F4tHbrPd6Dyy4sl2Ob8y5szk7nA/irVuGUWOc5fQhcWwRM5dWc/H7LtVyYawFfBZ/Wd/B5Uwf7Ne3P3Dz9auqG/ipUTvaWslvvzJz9Xfu91LPw/vH6dn65PF7Oz/ylig1FD2oc85OpdimGT59mttiKz+BTnhxrVp5g9du89v9R9gmGjfjwfA4AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzVndGO7LhyZf+lny8GSTLICN5fGcyDMeMBDBj2YOw34/67dXEzq06jyZaikgqufOqDA1HcfaTYytzaq+q/fvvXf//f//Sf//Lv//Yfv/31v357/A8tv/31f/7Xb//x//7p3/7+F//xn//0///zt78+/vLbP//b/zn++7e//PZ//+Vf//m3v6a//a+//P1w8R1efYc33+HqO9x8h3fX4fbwHZ58h2ff4b6rar6rar6rar6rar6rar6rar6r2n1Xtfuuavdd1e67qt13Vfvlf8i//OGoJFnkeeTf/1y/ju76PPvlf/efnD09Lt+SPzv95Vv4Z6d/5x/nIfZ1+uPPg9Onyzfxz05/+ab/2ekvD8nPTn95qH52+stD+LPTv3PfXzj9O/f9hdNftvqfnf4dR7tw+nunNt87tfmdqZWU9cvSUh2d/p2pvXD6d6b2wunfmdoLp3/raXV++reeVuenf2dqL5z+rc8h56d/64PI6enLO1N74fT3Tm25d2rLvVNb7p3acu/Ulnunttw7teXeqS33Tq3cO7Vy79TKvVMr906t+L6mJvGlD0nu/Qwr936GlXvnSu6dq3rvXNV756reO1f13rmq9z4N671Pw3rv07De+zSs905tvXdq271T2+6d2nbv1LZ7p7bdO7Xt3qlt905tu3dq271T2+6dWr13avXeqdV7p/b6a86fnf7eqb3+GvVnp793aq+/pv3Z6e+d2uuvgX90+uuvjX92et8LyeR8z5yuv2j+o3wr6XmciX0fWex17jeG6vTcb01Uae3rn72Y/frP7jz8qeatAVyu5q15daqp5fvwWtNAzVvjvVrN9Rf8C9S09Pg6vKWRmrcemsvVvPWMXa7mrUfycjWRfnOuJtJvztVE+s25mki/OVfz1qePxWry460PK8vVkLw4P0henB8kL84Pkhfn97piy9WQvDg/SF6cHyQvzm+19JareavUt14NyovfqgyuV4Py4rcKievVoLz4rbrjejUoL36rTLleDcqL36pqrleD8uL3iqDL1aC8+L2a6XI1KC9+r8S6XA3Ki9+ryC5Xg/Li9wq4y9WgvPi9eu9yNSgvfq88vFwNyovfqyYvV4Py4veKz8vVoLz4vVr1cjUoL36vtL1cDcqLr1fCQ9SgvPitOvt6NSgvfq8sv1wNyovfq+IvV4Py4veK/svVoLz4PYxguRqUF78H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NWd+1Zz5VXPmV82ZXzVnftWc+VVz5lfqzK/UmV+pM79SZ36lzvxKnfmVOvMrdeZX6syv1JlfqTO/Umd+pc78Sp35lTrzK3XmV+rMr9SZX6kzv1JnfqXO/Eqd+ZU68yt15lfqzK/UmV+pM79SZ36lzvxKnfmVOvMrdeZX6syv1JlfqTO/Umd+pc78Sp35lTrzK3XmV+rMr9SZX6kzv1JnfqXO/Eqd+ZU68yt15lfqzK/UmV+pM79SZ36lzvxKnfmVOvMrdeZX6syv1JlfqTO/Umd+pc78Sp35lTrzK3XmV+rMr9SZX6kzv1JnfqXO/Eqd+ZU68yt15lfqzK/UmV+pM79SZ36lzvxKnfmVOvMrdeZX6syv1JlfqTO/Umd+pc78Sp35lTrzK3XmV+rMr9SZX6kzv1JnfqXO/Eqd+ZU68yt15lfqzK/UmV+pM79SZ35lzvzKnPmVOfMrc+ZX5syvzJlfmTO/Mmd+Zc78ypz5lTnzK3PmV+bMr8yZX5kzvzJnfmXO/Mqc+ZU58ytz5lfmzK/MmV+ZM78yZ35lzvzKnPmVOfMrc+ZX5syvzJlfmTO/Mmd+Zc78ypz5lTnzK3PmV+bMr8yZX5kzvzJnfmXO/Mqc+ZU58ytz5lfmzK/MmV+ZM78yZ35lzvzKnPmVOfMrc+ZX5syvzJlfmTO/Mmd+Zc78ypz5lTnzK3PmV+bMr8yZX5kzvzJnfmXO/Mqc+ZU58ytz5lfmzK/MmV+ZM78yZ35lzvzKnPmVOfMrc+ZX5syvzJlfmTO/Mmd+Zc78ypz5lTnzK3PmV+bMr8yZX5kzvzJnfmXO/Mqc+ZU58ytz5lfmzK/MmV+ZM78yZ35lzvzKnPmVOfMrc+ZX3ZlfdWd+1Z35VXfmV92ZX3VnftWd+VV35lfdmV91Z37VnflVd+ZX3ZlfdWd+1Z35VXfmV92ZX3VnftWd+VV35lfdmV91Z37VnflVd+ZX3ZlfdWd+1Z35VXfmV92ZX3VnftWd+VV35lfdmV91Z37VnflVd+ZX3ZlfdWd+1Z35VXfmV92ZX3VnftWd+VV35lfdmV91Z37VnflVd+ZX3ZlfdWd+1Z35VXfmV92ZX3VnftWd+VV35lfdmV91Z37VnflVd+ZX3ZlfdWd+1Z35VXfmV92ZX3VnftWd+VV35lfdmV91Z37VnflVd+ZX3ZlfdWd+1Z35VXfmV92ZX3Vn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",
      "",
      "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",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod interfaces;\nmod types;\nmod utils;\n\ncontract Amm {\n    use crate::interfaces::Token;\n\n    // TODO: switch to dep\n    use crate::utils::tokens_are_in_order;\n    // use dep::token_ordering::tokens_are_in_order;\n\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n    use dep::value_note::{\n        value_note::{ValueNote, ValueNoteMethods, VALUE_NOTE_LEN},\n        utils as value_note_utils,\n        balance_utils,\n    };\n    use dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        oracle::get_secret_key::get_secret_key, // used to compute nullifier\n        selector::compute_selector, // used to compute function selector for calling a function\n        state_vars::{singleton::Singleton, map::Map, public_state::PublicState, set::Set},\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n            field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n    };\n    use dep::safe_math::SafeU120;\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit,\n            assert_current_call_valid_authwit_public,\n        },\n    };\n\n    use crate::types::safe_u120_serialization::{SAFE_U120_SERIALIZED_LEN, SafeU120SerializationMethods};\n\n    struct Storage {\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token0: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token1: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        reserve0: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        reserve1: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        // balances: Map<EasyPrivateUint>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Self {\n                admin: PublicState::new(context, 1, AztecAddressSerializationMethods),\n                token0: PublicState::new(context, 2, AztecAddressSerializationMethods),\n                token1: PublicState::new(context, 3, AztecAddressSerializationMethods),\n                reserve0: PublicState::new(context, 4, SafeU120SerializationMethods),\n                reserve1: PublicState::new(context, 5, SafeU120SerializationMethods),\n                // balances: Map::new(context, 6, |context, slot| { EasyPrivateUint::new(context, slot) }),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_init((Field),(Field),(Field))\"),\n            [admin.address, token0.address, token1.address]\n        );\n    }\n    #[aztec(public)]\n    fn _init(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        assert(token0.address != 0, \"token0 address is not valid\"); // sufficient chekc\n        assert(tokens_are_in_order(token0, token1), \"token0 must be less than token1\");\n        storage.admin.write(admin);\n        storage.token0.write(token0);\n        storage.token1.write(token1);\n        storage.reserve0.write(SafeU120::min());\n        storage.reserve1.write(SafeU120::min());\n    }\n\n    #[aztec(private)]\n    fn add_liquidity(\n        token0: AztecAddress, token1: AztecAddress, amount0: Field, amount1: Field, nonce0: Field, nonce1: Field\n    ) {\n        let sender = context.msg_sender();\n        Token::at(token0.address).unshield(&mut context, sender, context.this_address(), amount0, nonce0);\n        Token::at(token1.address).unshield(&mut context, sender, context.this_address(), amount1, nonce1);\n\n        // // TODO: use K formula\n        // storage.balances.at(sender).add((amount0 + amount1), sender);\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_finalize_add_liquidity((Field),(Field),Field,Field)\"),\n            [token0.address, token1.address, amount0, amount1]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _finalize_add_liquidity(token0: AztecAddress, token1: AztecAddress, amount0: Field, amount1: Field) {\n        assert(token0.address == storage.token0.read().address, \"token0 address is not valid\");\n        assert(token1.address == storage.token1.read().address, \"token1 address is not valid\");\n        assert(amount0 != 0, \"amount0 must be greater than 0\");\n        assert(amount1 != 0, \"amount1 must be greater than 0\");\n        storage.reserve0.write(storage.reserve0.read().add(SafeU120::new(amount0)));\n        storage.reserve1.write(storage.reserve1.read().add(SafeU120::new(amount1)));\n    }\n\n    #[aztec(private)]\n    fn swap(\n        token_in: AztecAddress,\n        token_out: AztecAddress,\n        amount_in: Field,\n        amount_out: Field,\n        secret_hash: Field,\n        nonce: Field\n    ) {\n        let sender = context.msg_sender();\n        Token::at(token_in.address).unshield(&mut context, sender, context.this_address(), amount_in, nonce);\n        Token::at(token_out.address).shield(&mut context, context.this_address(), amount_out, secret_hash, 0);\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_finalize_swap((Field),(Field),Field,Field)\"),\n            [token_in.address, token_out.address, amount_in, amount_out]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _finalize_swap(token_in: AztecAddress, token_out: AztecAddress, amount_in: Field, amount_out: Field) {\n        assert(amount_in != 0, \"amount_in must be greater than 0\");\n        assert(amount_out != 0, \"amount_out must be greater than 0\");\n        let amount_in = SafeU120::new(amount_in);\n        let amount_out = SafeU120::new(amount_out);\n\n        let mut token0 = storage.token0.read();\n        let mut token1 = storage.token1.read();\n        assert(\n            (((token0.address == token_in.address) & (token1.address == token_out.address))\n            | ((token0.address == token_out.address) & (token1.address == token_in.address))), \"invalid token_in or token_out\"\n        );\n\n        let reserve0 = storage.reserve0.read();\n        let reserve1 = storage.reserve1.read();\n\n        // validate amount_out\n        let mut reserve_in = reserve0;\n        let mut reserve_out = reserve1;\n        if (token_in.address == token1.address) {\n            reserve_in = reserve1;\n            reserve_out = reserve0;\n        }\n        let reserve_in_after = reserve_in.add(amount_in);\n        let reserve_out_after = reserve_out.sub(amount_out);\n        let k_before = reserve_in.mul(reserve_out);\n        let k_after = reserve_in_after.mul(reserve_out_after);\n        assert(k_after.ge(k_before), \"K invariant\");\n\n        // update reserves\n        let mut reserve0_updated = reserve0;\n        let mut reserve1_updated = reserve1;\n        let token0 = storage.token0.read();\n        if (token_in.address == token0.address) {\n            reserve0_updated = reserve0_updated.add(amount_in);\n            reserve1_updated = reserve1_updated.sub(amount_out);\n        } else {\n            reserve1_updated = reserve1_updated.add(amount_in);\n            reserve0_updated = reserve0_updated.sub(amount_out);\n        }\n        storage.reserve0.write(reserve0_updated);\n        storage.reserve1.write(reserve1_updated);\n    }\n\n    unconstrained fn reserves() -> [u120; 2] {\n        [storage.reserve0.read().value, storage.reserve1.read().value]\n    }\n\n    unconstrained fn tokens() -> [AztecAddress; 2] {\n        [storage.token0.read(), storage.token1.read()]\n    }\n\n    unconstrained fn balance_of_private(owner: AztecAddress) -> u120 {\n        // balance_utils::get_balance(storage.balances.at(owner.address).set)\n        0\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; VALUE_NOTE_LEN]\n    ) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, serialized_note)\n    }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/main.nr"
      },
      "22": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "23": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "27": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "38": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "80": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "97": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "98": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "99": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "100": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "109": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "113": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "115": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "116": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "122": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "123": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "126": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "130": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "132": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "133": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "138": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "149": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "150": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "155": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(serialized_note)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "157": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "162": {
        "source": "use dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n  types::address::AztecAddress,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn shield(self: Self, context: &mut PrivateContext, from: Field, amount: Field, secret_hash: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"shield((Field),Field,Field,Field)\"),\n      [from, amount, secret_hash, nonce]\n    );\n  }\n\n  pub fn unshield(self: Self, context: &mut PrivateContext, from: Field, to: Field,  amount: Field, nonce: Field) {\n    context.call_private_function(\n      self.address,\n      compute_selector(\"unshield((Field),(Field),Field,Field)\"),\n      [from, to, amount, nonce]\n    );\n  }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/interfaces.nr"
      },
      "164": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\n// This is safe when reading from storage IF only correct safeu120 was written to storage\nfn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120 { value: fields[0] as u120 }\n}\n\nfn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/types/safe_u120_serialization.nr"
      },
      "165": {
        "source": "use dep::aztec::types::address::{AztecAddress};\n\npub fn tokens_are_in_order(tokenA: AztecAddress, tokenB: AztecAddress) -> bool {\n    let a = tokenA.address.to_be_bytes(32);\n    let b = tokenB.address.to_be_bytes(32);\n    assert((a.len() == 32) & (b.len() == 32), \"addresses are not 32 bytes\");\n    let mut in_order = false;\n    for i in 0..32 {\n        if ((a[i] < b[i]) & (!in_order)) {\n            in_order = true;\n        }\n    }\n    in_order & (tokenA.address != tokenB.address)\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/utils.nr"
      }
    }
  }
}
{
  "name": "Amm",
  "functions": [
    {
      "name": "_assert_valid_swap",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "tokenIn",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "tokenOut",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amountIn",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amountOut",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_assert_valid_tokens",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_increase_reserves",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_init",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_update_reserves_after_swap",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "tokenIn",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "tokenOut",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amountIn",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amountOut",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_header",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::BlockHeader",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "archive_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "add_liquidity",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce0",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "balance_of_private",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VSQQrAMAhL69YyBnuL/UH//6p1TCGU3uYCoq0QYzADSHghVDP8r1vWb2gpjktZbx5xWn3Ym1Go7kHzS7w/yto97yMq7Yapf9l+8oOWzbhk4a33Kha3EySiOTEPSJMBD267DFLMzQIAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+3dB3QcxRkH8F2d2mpNDRAIvXeQJUOo4RwIEExvgQABXCAG02zTO4QWeu+9QyBAIEAgQCBArNhGgBEGYywbMC6yZMvGIhDei2buPumv0fjezeOb3Ojp2/f0pC033++b2VvdzO7e1kRRFEe5KdP5Ux71nmh9Nv+79sdNA2O+smp9Osv6iDPD6Izz+4FPb7mHeuU2VvQBYyVzu5ORjgFVnT/VnT9J509N58/Y6tzyJOp9nFDLKow81bLK/N9lsKwq/zftZ5X5ONx1E/GWWV/J34a1CdRNOdQR1U1F1LvOKy11XmWp82ooYxlYHxltsnT+NSlzG9B+g1NszGfh7xTyG8BrqU3BMgDiLO0h56Wi4nNeGnJfyuJb1oNvGQffsuBbxuJb3oNvOQff8uBbzuJbwYPvJw6+FcCyIq9F79NkWRHi/NRDzitFxedM8VN4HfpW8eBb2cG3CvhWtvhW9eD7mYNvVfDR63CfXt2DbzUH3+rgW83iW9ODbw0H35rgW8PiW9uDby0H39rgW8viW9eDbx0H37rgW8fiW9+Dbz0H3/rgW8/i29CDbwMH34bg28Di29iDbyMH38bg28ji29SDbxMH36bg28Ti29yDbzMH3+bg28zi29KDbwsH35bg28LiG+jBVxsV7xsIvlqLr57XV6d8dQ6+erBszWsZpCyDHCxbg2UrXovuI/+ct0zdnNuAn3KlOCmsxzbfhjm3GGJSuTSPPrH2b6uy1BnOBLarC8BHy7byaEkMi5oKHZdsPmzL7Xh9+hi+rYNvO7DsyGqp12N22ztYdgTLDqyW3DH8F7xl6mP4TuCnXClOCuuxzXdizi2GmFQuzaNPrGIVq1jFKlaxilWsYhWrWMUqVrGKVaxiFatYxSpWsYpVrGIVq1jFKlax8luVZVvDmcB22wbgo2U7eLQkhkVNha4TsfmwLQfz+vQ1NVkH32Cw7MJqqdPX1PzSwbILWHZmteSuqfkVb5n6mppdwU+5UpwU1mOb78qcWwwxqVyaR59YxSpWsYpVrGIVq1jFKlaxilWsYhWrWMUqVrH2FWsK8ciZRL3HeUvpo2U7e7QkhkVNhcbZbT5sy915ffqcxG4Ovt3BMoTXor+r4dcOliFg2YPXos9J7Mlbpj4nsRf4KVeKk8J6bPO9mHOLISaVS/PoE2v/tirLboYzge12C8BHy/bwaEkMi5oKHZdsPmzLfXh9+hi+t4NvH7Dsz2oZqM8r7+tg2R8s+7FacsfwA3jL1MfwA8FPuVKcFNZjmx/InFsMMalcmkefWMUqVrGKVaxiFatY+7dVWfY2nAlst3cAPlq2n0dLYljUVKifYvNhWx7M69N9uoMcfAeD5VBWS65P9xsHy6FgOYTVkuvT/Za3TN2nOwz8lCvFSWE9tvlhzLnFEJPKpXn0iVWsYhWrWMUqVrGKtX9bleUgw5nAdgcF4KNlh3i0JIZFTYX6KTYftuURvD7dpzvcwXcEWI7yYPmdg+UosBzJa9F9uqN5y9R9uqHgp1wpTgrrsc2HMucWQ0wql+bR11esynK44Uxgu8MD8NGyIz1aEsOipkLvH5sP23I4r0+/v4c5+IaD5VgPlhEOlmPBcgyvRR9rfs9bpj7WjAQ/5UpxUliPbT6SObcYYlK5NI++vmJVlmGGM4HthgXgo2XHeLQkhkVNhd4/Nh+25fEefMc5+I4H33EW3wkefKMcfCeAb5TFd5IH34kOvpPAd6LFd4oH38kOvlPAd7LFN8aDb7SDbwz4Rlt8p3rwjXXwnQq+sRbf6R58pzn4TgffaRbfmR58Zzj4zgTfGRbf2R58Zzn4zgbfWRbfuR585zj4zgXfORbf+R585zn4zgffeRbfhR58Fzj4LgTfBRbfxR58Fzn4LgbfRRbfJR58f3DwXQI+eh0+L/wyD75LHXyXge9Si+8KD77LHXxXgO9yi+9KD74/OviuBB+9Dve/qz34rnLwXQ2+qyy+az34rnHwXQu+ayy+6z34rnPwXQ++6yy+Gz34bnDw3Qi+Gyy+mz34bnLw3Qy+myy+Wz34bnHw3Qq+Wyy+2z34bnPw3Q6+2yy+Oz347nDw3Qm+Oyy+uz347nLw3Q2+uyy+ez347nHw3Qu+eyy++z347nPw3Q+++yy+Bz34HnDwPQi+Byy+hz34HnLwPQy+hyy+Rz34HnHwPQq+Ryy+xz34HnPwPQ6+xyy+J3l9enz/CQffk2B5mtei7yH/k4PlabA8xWvR5xr+zFumPtfwDPgpV4qTwnps82eYc4shJpVL8+gTa/+2KssThjOB7Z4IwEfLnvJoSQyLmgodl2w+bMvneH36GP6sg+85sLzAasl9N/lfHCwvgOV5VkvuGP5X3jL1MfxF8FOuFCeF9djmLzLnFkNMKpfm0SdWsYpVrGIVq1jFKlaxilWsYhWrWMUqVrGKVax9xaoszxrOBLZ7NgAfLXveoyUxLGoqNM5u82Fbvszr0+ckXnLwvQyWV1ktuXMSf3OwvAqWV1gtuXMSf+ctU5+TeA38lCvFSWE9tvlrzLnFEJPKpXn0iVWsYhWrWMUqVrGKVaxiFatYxSpWsYpVrGIVa1+xKstLhjOB7V4KwEfLXvFoSQyLmgqNs9t82JZv8Pr0OYnXHXxvgOUtVkvuuQz/cLC8BZY3WS25cxL/5C1Tn5N4G/yUK8VJYT22+dvMucUQk8qlefSJVaxiFatYxSpWsYq1f1uV5XXDmcB2rwfgo2VverQkhkVNhfopNh+25bu8Pt2ne8fB9y5YGlgtuT7dvxwsDWAZx2rJ9en+zVum7tONBz/lSnFSWI9tPp45txhiUrk0jz6xilWsYhWrWMUqVrH2b6uyvGM4E9junQB8tGycR0tiWNRUqJ9i82FbTuT16T7dBAffRLC8z2rJ9enec7C8D5ZGVkuuT/cBb5m6T/ch+ClXipPCemzzD5lziyEmlUvz6BOrWMUqVrGKVaxiFWv/tirLBMOZwHYTAvDRskaPlsSwqKlQP8Xmw7b8iNen+3STHHwfgWUyr0U/Z6DJwTIZLB/zWnSf7hPeMnWf7lPwU64UJ4X12OafMucWQ0wql+bRJ9b+bVWWSYYzge0mBeCjZR97tCSGRU2Fjks2H7blZ7w+fQyf4uD7DCzTeC36GD7VwTINLJ/zWvQxvJm3TH0Mnw5+ypXipLAe23w6c24xxKRyaR59Yu3fVmWZYjgT2G5KAD5a9rlHS2JY1FTouGTzYVt+wevTx/AZDr4vwDLTg+VLB8tMsHzFa9HH8K95y9TH8Fngp1wpTgrrsc1nMecWQ0wql+bR11esyjLDcCaw3YwAfLTsK4+WxLCoqdD7x+bDtpzjwTfbwTcHfLMtvhYPvrkOvhbwzbX4Wj345jn4WsE3z+Kb78HX5uCbD742i6/dg2+Bg68dfAssvkUefAsdfIvAt9DiW+zB942DbzH4vrH4Oph9cb5ctNB8RwBxv+WNqz8vdUQ9p0Lt8S1Yvue11CvLfxws34PlO16L/uz2X94y9We3H8BPuVKcFNbjPv4Dc24xxKRyaR59YuW3KkuH4Uxgu44AfLTsO/BVGfVX3vmzdmW39Rtea72yLoa6OB8MFCsD22xZ3e1aP++qgfUdkMuiqHddL+T167qmOFQuzVOsGshlEVi4PxPEUc//udnA4jLXvT7OtkPcxZZ6p/jt4FjAnL8qY77FsQAcFH8+ONp4HXWqjFaLow0cFL8VHPOY6yMxHGoq9P99HljmerC0OFjmgmW2B8scB8tssDCPL2nLLAfL12DhHj9TlpkOFhwXYR7jHOg6rohjnD7Gg13GW3E8mN5/2O+j9wH2VWl/xP417RdlsIzaJwPLqJ7KoQ6aDVftj5xwvK4Z4kzljaP7JHSej6ZCdT0VLD7OCTKff9X/K/H8K+VKcfAcDP7PnsKcWwwxqVyaR1+x1vY+ZJ1fYquP/crDtQz1qu9RDXX5qVGnmA/zNVV1rtdR4DUdzNea6eNAE2+Z+jjwEfgpV4qTwno8rjNf06f31yajTmkefcVap5TY6uO6R3offGLE+syoBw/3djlfc/kBWLivT+W/Ny/3PmgEP+VKcVJYXwa5cd+XF0NMKpfm0VestanEVg9tNUiV+R5vmV3vLarL94w6xXzGM8dW7y2675SmYu6hVZYJvBZv3/XTAH7KFe/rpvUZyI33O5UK3zeNvmKtjSW2emirelXmON4yu95bVJfjjDrF+qZ76dVnDdoXaPwuA+unVXZvdweMRzOPodW7nlel+D7GFT1cF6Dfm3hdAOVqO/+P/UDuMcI46jlGmIV59BVrbe9D1vkltvrYrzxcY9PVD6S6bDHqFPNhHqutc72+B8dqua+F8nD9lz4O4PVflKvtOi/sB3KPQ8dRz3HoLMyjr1jrvBJbPcTt+n8614jVatSDiv0lc2zXsfkvweLjOlvm8X79PsAxdsqV4uD4M/YDZzDnFkNMKpfm0VesdVaJrR7aapCHcyxd7y2qy+lGnWI+zOP8da7X++O9B8z3RA30cE5Fv7dwTLo5/5vipLAe+4HMY9R6f51q1CnNo69Y64wSW32c//JwTqLrvdWcL8+8x4fySfLb4TL1mWOFqu58pZ/nNqkypJ9XWqv084qapJ+Xm6SfF0k/T/p50s9zsUo/r6ip6H4efhalZfhZNMn/RLCdWr9SVXfb0IT7EfdnxkLvTYqFluqALBUBWSoDsjQGZMkEZEkCsjQEZCkPyOLz/gpXS1VAlqaALHGJLUnU+zMl3mfdDsvKjNeq/xmHVHevp/GYMngNfU7OWMpug2XmPTD4Wqwj5jGnHn32OOrZZ8d7dGLDV0pLU0CWqoAs7QFZygOyNARkSQKyZAKyNAZkqQzIUhGQpTogS9n/yYL30GZhHs+9MI+j63EhvD+UPi/Mg/wpfgs4uO9TVWXMsTjmgoPizwEH93i4KmOWxTEbHBQfx55m8jrqXe9PnQkW7vFgD2Ocer/D+0wpV4qD91fi/s887qvfd19FPeuU5tFXrLWlD1nnlNjqYb86xsN4bNf5OarLL4w6xfrGMVNaTp+VM7D+2vyH+aWiJY+Z+hjPxilrcS9pzLTUlpaALI0BWcoDsrQFZKkKyNIUkCUTkCUJyNIQkKUiIEtlQJa4xJYljd/SehxjnZ7/uwWWlVnKo/cjba/afiiM8zbnl+M4L137mrHEa7a4pllei3VJr8nmf9f+uEnXJcbJwjzFwnHeaQFYKgOyVARkaQjIkgRkyQRkaQrIUhWQpS0gS3lAlsaALC0BWaoDspRZLMz3PDjff+PzO7/UGAt+jplh1AmOi/i45+RzI2eax3tOmO8P6fWsueb8b4pTA/FtzyZTx5Q2w5mB9d/DGJPyMz8rT4/ZT7b4PwE/WXC7yeBvMXLKwPq4uqef+fuF9Bg7unRMYz4Lf+N3Hfl4luEk3jJ7PZ+ecqU4+CxS7Iv7eNbnJKNOaX5Jz00tZJ3eh6wzSmz1sV+pMpm/b6trjJ3q8gOjTjGfibyx9fPw8Hud1FToODARLMzfy6SPA8zfcaSPA+PBT7lSnBTW41gl8/c+6f11QtSzTmkefcVaPX5HFbu1oQ9ZPyyxNYFl78MyWo/Pqi4z8sAxNdpefQzqi9+Rj+vVVAH50GvMcjxc26rvjeZ+/pEqgz67lkPuFCcD67eHZx7sCGOjlPNiKGdPy3qairlG18c1Niounr/MQgyMy31NDcaN8z8Ug5Zn4O8h1AGOet4TSvWL1wS1WrbDvxcar8HnfrV6zhnvT87CPMVS+0kW9inaZ5SH+zlamC/WSxXUi/ld5b7fbxgfv/e8wzDi9eN4fOR+Vlsc9XzWWBbm8b5y23XylAceS/B5LRW81nr8/0JToeMKnssrZ643tduuni/r2BFj9z116KiRw4aMOHPwicP3PXr02JFHjxo8fPjoEWPGxAAlfMaCx5NMlcZ2WNnlsAwHZmgZvaYKflfCNlmeCtADWGSJLPlgLDR62DF0Y9BDgzob44ARw0aPGNvZGFj3ZC0zfpt/40n6KmZnDLlTueYHCxW3mjeu7oQkEJfqguLgyQMcjKhhzl+VYbuApgZ+U/wUPKlRR2rZAPibfpdZXkvtOQDKMPdT1h5klA9Qlg+ukqyIut8AmLjCVOehNbD+fzqoqq2ydwEA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "admin",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token0",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "token1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "reserves",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XTU/DMAyGk6yfW/fJfkiH4N5/gMSR2yQmjkjAYT8fWmrtwXQTUl06X5I4sd/Xbuq6wTnn3bdM3Ek8xqDmT+06wfmqHcuekgDbymf85SNufeXgLHEt2liCLe7drCOfCfJshLPz7qdUmE8Qtz6XYz9AF5RtnbsH7McdNkkHHu1FF7lTHrQtcxSrWMp+0uSIOBXWgjVVHIbkInkQv5HiMiZuaotb1j4y4Mq9SJF3wc/AIzfm4RWPo/tdFwbAvWcdYHxTW5yLdUCwztWkMbicq0nclzEoW12TinbOmjRv55MO3wV0kpN5hy1zVKhYyn7S5Ig4FdYF4vWK35hcsn/iwntaYV1cAe7CFrepj0vgyh1dYC34S/BYGfPwiscRuCvgbmxxb3P4F7lUPzbgsrblsqt93tj6bJ7vFvwlVsGZYZ/fh61xbB6Y4lfW5PdXrsuRuebQraCT/TV0QcXB/lTOp26Y/jxxp37Syid7aZFL78yQ/Wx9Z6VOvn+8vu1fDo+H/TN/ISNFMYAa5/xUS3sYQSevB9s2sU+hEz8Z9nR6zOLXfvX/ssgnVMt5y2wPAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "tokenIn",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "tokenOut",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amountIn",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amountOut",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "tokens",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82XT0+DQBDFly1/S0trPwmtX4C7Nw/em9h4NFG/fxTkhZ8T2piwiHNhd3Zn3psHLIN3zkXu21ZusAhXb8ZP/TzF/qa/1hMtBXaonMlXjqTPVYCz6qr6WnxY3FM5omcKnQPhHCP30xqMV6jb7iuw7uHzJrbV7gHryUhMOoLHePliN+hgY6lRYmqpp1mnEXEazIW1Nhzm5CIdlDc2XJbEzcLi1m2OHLh6LjLoLvwcPPKwPO75PrLeYgadndFZJqxrZ8MSXK6dDVrP4fMm1p4Nqov7Nv14NZK7hG/djzcjsdSoNLXU06zTiDgN5sLi2bD5B1ySP+Kie6K8a8NlSdxtWNzunKqAq2d0C92FX4HHPiyPU2F4tHbrPd6Dyy4sl2Ob8y5szk7nA/irVuGUWOc5fQhcWwRM5dWc/H7LtVyYawFfBZ/Wd/B5Uwf7Ne3P3Dz9auqG/ipUTvaWslvvzJz9Xfu91LPw/vH6dn65PF7Oz/ylig1FD2oc85OpdimGT59mttiKz+BTnhxrVp5g9du89v9R9gmGjfjwfA4AAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzNnd2Oo7l1Rd+lrweB+PHvnHmVIBdG4gAGDDuIfWfMu5sDf1XVRlND7pFIris3CiS9MRS3pCUu6R/f/vzX//7D3//017/87dvP//j2+I/i337+z398+9v//eEvv/7hb3//w////dvPj5++/fEv/9P+95efvv3vn/78x28/h1/+66c2vD604UEbfmnDozY8acOzNrxow6s23LTh2q6atqum7appu2rarpq2q6btqmm7atqumrarpu2qa7vq0/8hf/phVEhXSvfIX/+dP0d7vVef/u/+e1YPj+mH5O9bfvoh/PuW1x6U4aE9KsNDe1iGh/a4DA/tgRmC9sgMQSucELTGCUGrnBC0zglB3N8g7m+Y3t8fH54Wwz3Okn2NjPax9vRj4XesPf246R2rWMrnsYr2tX47VuLwf6W5ph+VW9K81Ghimhy/huccOmleKsC3p3npyURMU8Ljc3gJvTTTp3VLmhe6YEGaF9pjQZqdfTNME3f2zTjNzr4Zp9nZN+M0068PtqR56YX629Ogujiiujiiujiiujiiujihujihujihujihujihujihujihujihujihujihujijujijujijujijujijujijujijujijujijujijurigurigurigurigurigurigurigurigurigunj+csyONPN3b7akQXXx/M2hLWlQXTx/72lLGlQXz9/a2pIG1cXzd862pEF18fyNuS1pUF08f99vSxpUF8/fVtySBtXF83ctt6RBdfH8TdEtaVBdPH/PdUsaVBc7qosd1cWvXXh+expUFzuqix3VxY7qYid18fUgdfH1mhXw9jSkLr7mHYJ3pMn1K0398bbzNW8o7Egz7ye8nibHr51q/+7s1Lz9sCXNxkfxRJqNrygm0mx8RTGRZt8rCov+oTi1f5bPwfb4yLKvbcZZNnZNjil/7lJ65BeG3+E3vvh4f/iNr1W08F4/nxIe19fY8Ph40OyUg94dfevzx3uj73yLVsOXpllD5+G7VTsap9n5Am6cZucLuHGanW/Rxml2vkWrOX6lqf5jmq3a0TjNzrdo4zQ736KN0+zEZeM0W7t4mGZrFw/TbO3iYZqdXWzh6820xdRJs7OLx2m2drGX79J0nhm2qjVWv0tTayfNzr4Zp9nZN+M0O/tmnGZn34zTbO2bYZqtfTNMs7Nvhmm2qjXjNDtf+43T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",
      "",
      "",
      "",
      "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",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "eJztnMtu2zAQRf9Fa6PgY8gR8ytFF0GbAgGCpGiyC/zvVdqKEmSWg8bMHZvQyg5AhgfX8hmOTPt1eHj6evty//T4PNy8Dn64+fw6PP+4fXz76/nl9ufLcGMOw93jt+nxeBi+3z/cDTf2eDgZZcnH+Hfk9Hwc8+jEpeHBWTsPDy4KwxPzPNi4sIAYc/xyGOg6sQMQ21PI2GTCOdixhO2SnXm8taEO7xO7eQGfRl5o0kdnznD4hsmPZ8OTsXkBMjSu4acFUoMFDFUWsKbBCiHlFSwlIX8KY754iC1tgSwcKNl8QVDybgvkLg2oWBQ0gYq61wQqilwT6HxFNwY6X7uNgVqotClQC/W2BHJ4UwtACqaObgHitAVSMHUdSMHUdSAFU9eBFExdB1IwdR1IwdR1IAVT14EUTF0F8gqmrgPBTR2M9bnJMt5sgeCmloDgppaA4KaWgOCmloDgppaA4KaWgOCmloDgphaACG5qCQhvanL5BlQg2t6OIbypBSC8qQUgvKkFILypBSC8qQUgvKkFILypBSC8qetAAW9qAUjB1ONSOqY6sgVSMHUdSMHUdSAFU9eBFExdB1IwdR1IwdR1IAVT14EUTF0FigqmrgPhTR1oKR0hhi0Q3tQCEN7UAhDe1AIQ3tQCEN7UAhDe1AIQ3tQCEN7UdSDGm1oAgps6UsqHUWI4+YiT4aaOUwHLQNHwFghu6hg9LUB88pLBTc0m5YTY0klCcFPz9KJlIOe2t/QYbmp2fsxA/mQ/xHBTs7d5ONPJkS+Gm5rJ58/LOJjtoTiGm5qnPewCFIThkeb9blwdvrTel8Z6N79dJsH55R+/47QjvF5cRyzwqvWfsYzztc6relKOxdq0FERnVtzFYMjks7Rk18XqHSnCS+0HpujsmEmc87EejDWjz6FP1e28HOE7hE5zxG9s+swRvx/rM0f8NrLPHPG73z5zxG/a+8zx0nuNK8kxXXpzci059tTNaOa49zNtctz7mTY57v1Mmxz3fqZNjns/0ybHvZ9pk2NX/Yx3+ccophidlKOn/HGIIXPW7zmkrvoZvRynhz3INkF21dFoBtlVS6MZZFc9jWaQXTU1mkF21dVoBtlVW6MZZFd9jWaQe2PTKMi9s2kTJP4353oNcu9sGgW5dzaNgtw7m0ZBdtXZcFpu647r7xC8J5kLb1XCOB8s5uCFZISjIZ+KO47AM3xcXZPWxT9zytVVmlSsJDZ/08LZ1Ys8xft7P/SPWdWl3mYVZSvOKppFnFV8G4mzipdYZdbx+AvPmYLJ",
      "eJzNmd1qhEAMRt9lrqVMMol/r1J6Ie0WFha3VO/Ed28X7NbSUKEMme9OIcGjwjmgS7hcn4f5fB2n0C8hPmjoH5cwvQ3j7Xyah/c59C01sQqn8eV22KW1Cq/nyyn0tFa/Zolr3mYppd1sao3ppLINp053s3F9qj5paiiaBoqmhaLpoGgoYuEQFg5j4SQsHMHCwTIyYSmZsJxMWFImLCszlpUZy8qMZWXGsjJjWZmdrSyRtmHh+APHQE/6hS7yPVvLhu5s8JzozrbPie5chn+iKxvozhXJiJ7s4vD9Ci2z+Fkj2cUphmMXpxiOXZxiOHZxiuHYxSmGY1ekGI5dhmI4tu2L4dgGL4UjWFYWLCsLlpUFy8qCZWXBsrJgWVmwrCxYVhYsKyuWlRXLyoplZcWysmJZWbGsrM5WzvjZQp0NnhPd2fY50Z3LkPGLS+1ckYzojfnUOTbbEu9f1f0vvHm/R0tm246WzAIdLZmdOFoybf7H0rp+AOk+4+4=",
      "eJztnd2O4zYWhN+lrwcL/lOaV1nsxWCTBQIEk8XO3A363aMORpRikay1TZ1zRPMqHUAafy7ZVTy2Vfzx9vsf//7y/bc/vn57+/zjzb59/uePt2///fL14/++ff/yv+9vn9Wnt1+//rL89/3T239++/3Xt8/6/dPhKO1sCD+PXP6epnT0HHOHe6P1erg3ARw+x7gerIzfQJR6/9enN3dNbE+IbZ1P2E75Z7BDDttFv5K7Ofo6vJ2jWR/AzlPcaOazNY/k8A2Vn56Gd0qnB3DKTXv45QHmBg+gXOUBtGrwCH5Oj6DdDPR3fkovHhe1uwXS5ECzTi8IN1tzC2SkAWVDgRMoa/ecQFkj5wR63qIbAz1vu42BWlhpU6AW1tsSyNA7NQBicOpgNqA43wIxOHUdiMGp60AMTl0HYnDqOhCDU9eBGJy6DsTg1HUgBqeuAlkGp64DkTu1V9qmIUtZdQtE7tQIiNypERC5UyMgcqdGQOROjYDInRoBkTs1AiJ3agDkyJ0aAdE7tTPpAyjv3O3HMY7eqQEQvVMDIHqnBkD0Tg2A6J0aANE7NQCid2oARO/UdSBP79QAiMGppy06lhy5BWJw6joQg1PXgRicug7E4NR1IAanrgMxOHUdiMGp60AMTl0FCgxOXQeid2rvtujwwd8C0Ts1AKJ3agBE79QAiN6pARC9UwMgeqcGQPRODYDonboOFOmdGgCRO3Vwc/oxSvCHrzgjuVMHn/5tHYKKt0DkTh2CdRtQPFwycqeOak4KRe0OCpE7dVwuWgIy5vYjvUju1NHYKQHZw3ookjt1tDodHt3hJ1+R3Kmjs+n7suVhbn8UF8mdOi5r2A3Ig8ODW9e7YffjS21t7lhrVurF4Oz2Dz/wa0fyvLiGLOSpdacs0/paj7s8ycui9bwFolEa/DrWqfRbWqf3YfWAiuRRe6KKRk+JxBgb6sJoNdkk+pJuz+lIvkLoVEf6hU2fOtKvx/rUkX4Z2aeO9KvfPnWkX7T3qaP0WeMiOs7Sh5Or6NjTNMOp45hn2ug45pk2Oo55po2OY55po+OYZ9roOOaZNjp2Nc9Yk8ooFhkN0tG69HWIcuqpPoe5q3mGT8flP0PINkJ2NdFwCtnVSMMpZFczDaeQXQ01nEJ2NdVwCtnVWMMpZFdzDaeQY7BpJOSYbNoISd8516uQY7JpJOSYbBoJOSabRkJ2NdnEeftYd9rfQ/CIMsJHFT+tINFboAx6qtlhwiuz0vtF2upTDakXatr9lld/vJYPx05erT/mnfzfb2PIiNKyA1jn6yiFPNGGfcE6X3N53hNNb4rJT7f3geh8xeV5MDZWYPL1lufBzOngMNn6S2DW0/oKmK0+kmdXYTLIfWobmv2hbEjnCzMvQZ5dZ1yCPBvslyDPBu8lyIlztCE5cTA2JCdOuobkxLHYjjxfPHoJcskZGlQij/FALjlD6+SSM7ROLjlD6+SSM7ROLjlD6+SSM7ROLjlD6+SSM7RKnq+EvQS54AwN6cOiOZjDHkT5ktlLkAvOUEAuOEMBueAMBeSCMxSQC85QQC44QwG54Aytk+fLei9BLjdDtVLb15FKOXtgl5uimF1ujmJ2uUmK2eVmKWaXm6aYXW6eYna5iYrZ5WYqZM8XK1+EXXSupt+yaPXxRf0tu+hcBeyicxWwi85VwC46VwG76FwF7KJzFbCLzlXALjpX6+z5GuyLsEvOVe22NcHi5gd2ybmK2CXnKmKXnKuIXXKuInbJuYrYJecqYpecq4hdcq4C9nxd+EXYBeeq2b4GXv4+bPas803aF2EXnKuQXXCuQnbBuQrZBecqZBecq5BdcK5CdsG5itjzTbcXYZecq0Gle7dMcIfvhvONrlLYw3arajSHz9/zLapC2ON236yJ05Fdcq5OamOf9oWFP9kF56o1Pt3Bae1hEySdb+gUwr67Ndva492E+VZMKezb3dDW7W8r/8kuOFetS3c3a+sPu8HpfPujEHY/p21ibQi32WTyhYtC2KPedI9G1w/f9sPd722mbY6j4UZYJt+0OBS8Q0HBa4z7FPRm/af9bo/GvIJxTm4eZ6/qCjbcc8zkixh7l3uKbn1+U5xAoYHx87r/pwnP1TwYJXgld6Lcy6OvHLN7qj/C5Hsar6igS6a5xDJQEImSX6jq1Dfh91XiOVFsXK+Qt0gUbeeY1vx2niKQpWVRism3Iop5qg2rUky+t/C0p+qUTjhLxNxOQybf/ncijnI1nHyH3ok4dzUmOT+l17yLhw1/Tb64Tgz9rNPL2M2HTcFNvi3uMvT5Nc9V6PNLiKvQ5+P7KvS0OduanjY6W9NTp2FbeurwbEpfqCa7Cr3wrE3zyPL34QsjU6gouwq98KwF9MKzFtALz1pALzxrAb3wrAX0wrMW0AvP2jp9ocLsKvSis9ar1MG2/H0oYTOFKrOr0IvOWkgvOmshveishfSisxbSi85aSC86ayG96KxF9IWqs6vQy85aZ9LXCd65wyfghcqzq9DLzlpELztrEb3srEX0srMW0cvOWkQvO2sRveysBfSFSrSr0AvP2mlbKSzLhgO98KwF9MKzFtALz1pALzxrAb3wrAX0wrMW0AvPWkAvPGvr9IWitKvQy85a77aVgg+3N4CYQlnaVehlZy2il521iF521iJ62VmL6GVnLaKXnbWIXnbWAvpCedpV6EVnbXBz+hV18MdfdhUK1KTQb5uP6hBUPNCLztoQrNvoDze6mkKJmhD6qOakfdTuqL3orI3LayfRG3P45qdQpCaF3thtt2h7XN8XqtSk0FudDo/ueOdGoUxNCr2z6fc50R8qDUyhTk0K/X07sLt1jNzflpnfZ7zlLcqFWreh4T0ail533KlhaqiNKgINtZ63JY1RuxtQT7/Vu9CK17/kRk+JxOyfY1ZFrSabrtCyinhSdNFrvF5Fl7007VR02SvqTkWXPQh0Krrs+aVT0WWPXZ2K3tO0eBXRC+2mQ/RTRX/VeZRV9DGRMog+JlIG0cdEyiD6mEgZRB8TKYPoYyJlEP1lJ9Jd9fjyFA0S3W7t9sqp5+ofC/XaQ/QTRbeFXvAh+qmiv+xEyin6y06knKK/7ETKKfrLTqScor/sRMop+stOpJyiv+xEyin6mEgZRB8TKb3ossv/exV9TKQMoo+JlEH0MZEyiP6yE2nctsM00/5Ou0dU7GjE9GmrzegtUBHJkh8CTbo7dgHTVVk4d72yha07zsRvuJOVLezdcQ8+2J3KFjbYuO8hqjtO2cIuGPc9RMtdpGxhZ4sziep7bdjCbhWcRPks5yTKBx0nUT40OIme9+vWRM9bcGuiFq7alqiFCTclKuymwEnE4NnVPRtsYdcDTiIGzwZEDJ4NiBg8GxAxeDYgYvBsQMTg2YCIwbPrRIVWfk4ics8G3f+20J7PSUTu2ZCI3LMhEblnQyJyz4ZE5J4Nicg9GxKRezYiKrS7cxLRe3a9Q94WWtg5ieg9GxHRezYiovdsRETv2YiI3rMREb1nIyJ6zwZEhZZwTiIGz652kdtCmzcnEYNnAyIGzwZEDJ4NiBg8GxAxeDYgYvBsQMTg2XWiQts0JxG9Z9c7rW2hFZqTiN6zERG9ZyMies9GRPSejYjoPRsR0Xs2IqL3bEBU6AvmJCL3bNDkbwvltGcS1dv5baG59UyieuO+LdSankgEWvRtofPzTKJ6M74tFGKeSVRvu7eFtsgzieoN9rZQpXgmUb2V3hZ6Bs8kukJLui1UAQ5dyPOrx0Z4W+jfu6aMjFVAttCpN4S8W0j6JU6nQtKvzDoVkn5B2amQ9OvgToWkX753KqT0qeMiQrpCP9wQ8m4he5prWIUck00jIcdk00jIMdk0EnJMNo2EHJNNIyHHZNNIyK4mG74qFVfoJBtC3itkoWdsCHm3kF1NNpxCdjXZcArZ1WTDKWRXkw2nkF1NNpxCdjXZcArZ1WTDKeSYbBoJOSabNkLSl9n1KuSYbBoJOSabRkKOyaaRkF1NNg1bhh19YSRXc/D0j+yKo4r/12n5jw7/j/OyeaLTjRhG7y619h8naVU4y8f1scLunaNNWM/KWy46K+8v6Kz8mwmdlX+hVc/ShWvm7KqhV7sKbJ3Oyl8yfNoDV8yULln90UzpmuHTshcNn5a9avi07GWrnmbUg2+1jxMfe7P9deb9F8889n4zj73hzGPvOPPYW8489p6zpfccPKvwDQs87f7LZovvufqjFd9z+LT7L5stvufwafdetvf3PwG4x6Cb",
      "eJzN101qwzAQhuG7aG2KND+27KuULkybQiA4pfbO6O5twE1aLNUbIX27BGbCm2CeIau5XF/H5XydZjOsxj6pGZ5XM3+M0+39vIyfixk8W9eY0/R2e0kUGvN+vpzM4EKzm3XU0jbrmPkxyz4yzSrbMPf6a9aGl+a7poWq6aBqPFRND1XjLFaOw8ohrBzGyhGsHCyRHRbJDstkh4Wyw1KZsFQmLJUJS2XCUpmwVKbCKsv9g4Xsn5z9LGm/zVLrH7PSb+mFBc+ZXlj7nOmJy0ByTxct+PwmLkOlHE5chlo5ictQKydxGWrlJC5DrZzEZaiVk7gMtXIS2tfKSQheKwdLZcZSWbBUFiyVBUtlwVJZsFQWLJUFS2XBUlmwVBYslRVLZcVSWbFUViyVtbDKGf9Aa2HBc6YX1j5jehf91cl2P0si+6esi37fo6XoDTpail6Ko6Wo5wdLPqruP0shfAGdiwwT"
    ],
    "fileMap": {
      "1": {
        "source": "mod interfaces;\nmod types;\nmod utils;\n\ncontract Amm {\n    use crate::interfaces::Token;\n\n    // TODO: switch to dep\n    use crate::utils::tokens_are_in_order;\n    // use dep::token_ordering::tokens_are_in_order;\n\n    use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n    use dep::value_note::{\n        value_note::{ValueNote, ValueNoteMethods, VALUE_NOTE_LEN},\n        utils as value_note_utils,\n        balance_utils,\n    };\n    use dep::protocol_types::constants::EMPTY_NULLIFIED_COMMITMENT;\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        oracle::get_secret_key::get_secret_key, // used to compute nullifier\n        selector::compute_selector, // used to compute function selector for calling a function\n        state_vars::{singleton::Singleton, map::Map, public_state::PublicState, set::Set},\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        types::type_serialization::{ // serialization methods for using booleans and aztec addresses\n            bool_serialization::{BoolSerializationMethods, BOOL_SERIALIZED_LEN},\n            aztec_address_serialization::{AztecAddressSerializationMethods, AZTEC_ADDRESS_SERIALIZED_LEN},\n            field_serialization::{ FieldSerializationMethods, FIELD_SERIALIZED_LEN},\n        },\n        types::address::{AztecAddress},\n    };\n    use dep::safe_math::SafeU120;\n    use dep::authwit::{\n        auth::{\n            assert_current_call_valid_authwit,\n            assert_current_call_valid_authwit_public,\n        },\n    };\n\n    use crate::types::safe_u120_serialization::{SAFE_U120_SERIALIZED_LEN, SafeU120SerializationMethods};\n\n    struct Storage {\n        admin: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token0: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        token1: PublicState<AztecAddress, AZTEC_ADDRESS_SERIALIZED_LEN>,\n        reserve0: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        reserve1: PublicState<SafeU120, SAFE_U120_SERIALIZED_LEN>,\n        // balances: Map<EasyPrivateUint>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Self {\n                admin: PublicState::new(context, 1, AztecAddressSerializationMethods),\n                token0: PublicState::new(context, 2, AztecAddressSerializationMethods),\n                token1: PublicState::new(context, 3, AztecAddressSerializationMethods),\n                reserve0: PublicState::new(context, 4, SafeU120SerializationMethods),\n                reserve1: PublicState::new(context, 5, SafeU120SerializationMethods),\n                // balances: Map::new(context, 6, |context, slot| { EasyPrivateUint::new(context, slot) }),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_init((Field),(Field),(Field))\"),\n            [admin.address, token0.address, token1.address]\n        );\n    }\n    #[aztec(public)]\n    fn _init(admin: AztecAddress, token0: AztecAddress, token1: AztecAddress) {\n        assert(token0.address != 0, \"token0 address is not valid\"); // sufficient chekc\n        assert(tokens_are_in_order(token0, token1), \"token0 must be less than token1\");\n        storage.admin.write(admin);\n        storage.token0.write(token0);\n        storage.token1.write(token1);\n        storage.reserve0.write(SafeU120::min());\n        storage.reserve1.write(SafeU120::min());\n    }\n\n    #[aztec(private)]\n    fn add_liquidity(\n        token0: AztecAddress, token1: AztecAddress, amount0: Field, amount1: Field, nonce0: Field, nonce1: Field\n    ) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_assert_valid_tokens((Field),(Field))\"),\n            [token0.address, token1.address]\n        );\n        let sender = context.msg_sender();\n        Token::at(token0.address).unshield(&mut context, sender, context.this_address(), amount0, nonce0);\n        Token::at(token1.address).unshield(&mut context, sender, context.this_address(), amount1, nonce1);\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_increase_reserves(Field,Field)\"),\n            [amount0, amount1]\n        );\n        // // TODO: use K formula\n        // storage.balances.at(sender).add((amount0 + amount1), sender);\n    }\n\n    #[aztec(private)]\n    fn swap(\n        tokenIn: AztecAddress,\n        tokenOut: AztecAddress,\n        amountIn: Field,\n        amountOut: Field,\n        secret_hash: Field,\n        nonce: Field\n    ) {\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_assert_valid_swap((Field),(Field),Field,Field)\"),\n            [tokenIn.address, tokenOut.address, amountIn, amountOut]\n        );\n\n        let sender = context.msg_sender();\n        Token::at(tokenIn.address).unshield(&mut context, sender, context.this_address(), amountIn, nonce);\n        Token::at(tokenOut.address).shield(&mut context, context.this_address(), amountOut, secret_hash, 0);\n\n        context.call_public_function(\n            context.this_address(),\n            compute_selector(\"_update_reserves_after_swap((Field),(Field),Field,Field)\"),\n            [tokenIn.address, tokenOut.address, amountIn, amountOut]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn _assert_valid_tokens(token0: AztecAddress, token1: AztecAddress) {\n        assert(token0.address == storage.token0.read().address, \"token0 address is not valid\");\n        assert(token1.address == storage.token1.read().address, \"token1 address is not valid\");\n    }\n\n    #[aztec(public)]\n    internal fn _increase_reserves(amount0: Field, amount1: Field) {\n        storage.reserve0.write(storage.reserve0.read().add(SafeU120::new(amount0)));\n        storage.reserve1.write(storage.reserve1.read().add(SafeU120::new(amount1)));\n    }\n\n    #[aztec(public)]\n    internal fn _assert_valid_swap(tokenIn: AztecAddress, tokenOut: AztecAddress, amountIn: Field, amountOut: Field) {\n        assert(amountIn != 0, \"amountIn must be greater than 0\");\n        assert(amountOut != 0, \"amountOut must be greater than 0\");\n        let amountIn = SafeU120::new(amountIn);\n        let amountOut = SafeU120::new(amountOut);\n\n        let mut token0 = storage.token0.read();\n        let mut token1 = storage.token1.read();\n        assert(\n            (((token0.address == tokenIn.address) & (token1.address == tokenOut.address))\n            | ((token0.address == tokenOut.address) & (token1.address == tokenIn.address))), \"invalid tokenIn or tokenOut\"\n        );\n\n        let reserve0 = storage.reserve0.read();\n        let reserve1 = storage.reserve1.read();\n        let mut reserveIn = reserve0;\n        let mut reserveOut = reserve1;\n        if (tokenIn.address == token1.address) {\n            reserveIn = reserve1;\n            reserveOut = reserve0;\n        }\n\n        let reserve_in_after = reserveIn.add(amountIn);\n        let reserve_out_after = reserveOut.sub(amountOut);\n\n        let k_before = reserveIn.mul(reserveOut);\n        let k_after = reserve_in_after.mul(reserve_out_after);\n        assert(k_after.ge(k_before), \"K invariant\");\n    }\n\n    #[aztec(public)]\n    internal fn _update_reserves_after_swap(tokenIn: AztecAddress, tokenOut: AztecAddress, amountIn: Field, amountOut: Field) {\n        let amountIn = SafeU120::new(amountIn);\n        let amountOut = SafeU120::new(amountOut);\n\n        let mut reserve0 = storage.reserve0.read();\n        let mut reserve1 = storage.reserve1.read();\n        let token0 = storage.token0.read();\n        if (tokenIn.address == token0.address) {\n            reserve0 = reserve0.add(amountIn);\n            reserve1 = reserve1.sub(amountOut);\n        } else {\n            reserve1 = reserve1.add(amountIn);\n            reserve0 = reserve0.sub(amountOut);\n        }\n        storage.reserve0.write(reserve0);\n        storage.reserve1.write(reserve1);\n    }\n\n    unconstrained fn reserves() -> [u120; 2] {\n        [storage.reserve0.read().value, storage.reserve1.read().value]\n    }\n\n    unconstrained fn tokens() -> [AztecAddress; 2] {\n        [storage.token0.read(), storage.token1.read()]\n    }\n\n    unconstrained fn balance_of_private(owner: AztecAddress) -> u120 {\n        // balance_utils::get_balance(storage.balances.at(owner.address).set)\n        0\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(\n        contract_address: Field,\n        nonce: Field,\n        storage_slot: Field,\n        serialized_note: [Field; VALUE_NOTE_LEN]\n    ) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, serialized_note)\n    }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/main.nr"
      },
      "22": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "23": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "27": {
        "source": "impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n",
        "path": "std/field.nr"
      },
      "38": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "80": {
        "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_COMMITMENTS_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as commitments and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_COMMITMENTS_PER_TX ≥ MAX_NEW_COMMITMENTS_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_PENDING_READ_REQUESTS_PER_CALL: Field = 32;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_COMMITMENTS_PER_TX: Field = 64;\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_OPTIONALLY_REVEALED_DATA_LENGTH_PER_TX: Field = 4;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_PENDING_READ_REQUESTS_PER_TX: Field = 128;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n// TODO(961): Use this constant everywhere instead of hard-coded \"2\".\nglobal KERNELS_PER_BASE_ROLLUP: Field = 2;\nglobal MAX_NEW_NULLIFIERS_PER_BASE_ROLLUP: Field = 128;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_BASE_ROLLUP: Field = 32;\nglobal MAX_PUBLIC_DATA_READS_PER_BASE_ROLLUP: Field = 32;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 254;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 1;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 15;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 7;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 25;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 7;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 13;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue bellow is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 26;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\nglobal CALL_CONTEXT_LENGTH: Field = 7;\nglobal BLOCK_HEADER_LENGTH: Field = 7;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we\n// should change this constant as well as the offsets in private_call_stack_item.nr\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 155;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 3;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 142;\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal EMPTY_NULLIFIED_COMMITMENT: Field = 1000000;\nglobal CALL_PRIVATE_FUNCTION_RETURN_SIZE: Field = 161;\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 87;\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH: Field = 144;\nglobal COMMITMENTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 4096;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 104;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 128;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__COMMITMENT = 1;\nglobal GENERATOR_INDEX__COMMITMENT_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_COMMITMENT = 3;\nglobal GENERATOR_INDEX__SILOED_COMMITMENT = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n",
        "path": "/protocol_types/constants.nr"
      },
      "97": {
        "source": "use dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    BLOCK_HEADER_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__BLOCK_HASH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_header: BlockHeader,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:block-header\nstruct BlockHeader {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    archive_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:block-header\n\nimpl BlockHeader {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; BLOCK_HEADER_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.archive_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn deserialize(deserialized: [Field; BLOCK_HEADER_LENGTH]) -> Self {\n        BlockHeader {\n            note_hash_tree_root: deserialized[0],\n            nullifier_tree_root: deserialized[1],\n            contract_tree_root: deserialized[2],\n            l1_to_l2_messages_tree_root: deserialized[3],\n            archive_root: deserialized[4],\n            public_data_tree_root: deserialized[5],\n            global_variables_hash: deserialized[6],\n        }\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, archive_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n\n    pub fn block_hash(self) -> Field {\n        // TODO(#3442): Unify the ordering in `BlockHeader::serialize` function and the ordering\n        // in the block hash preimage --> This requires changes in the circuits.\n        let inputs = [\n            self.global_variables_hash,\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.public_data_tree_root\n        ];\n        pedersen_hash(inputs, GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_header.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_header.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "98": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n    pedersen_hash([pub_key_x, pub_key_y, partial_address],\n        GENERATOR_INDEX__CONTRACT_ADDRESS)\n}\n",
        "path": "/aztec/address.nr"
      },
      "99": {
        "source": "use dep::protocol_types::constants::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    BlockHeader,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n    get_block_header::get_block_header,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_header: BlockHeader,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_header: inputs.block_header,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_block_header(self, block_number: Field) -> BlockHeader {\n        get_block_header(block_number, self)\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.block_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, self.this_address(), self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_header: BlockHeader {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    archive_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_header: BlockHeader::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_header: BlockHeader,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_header: inputs.block_header,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_header: self.inputs.block_header,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_header.l1_to_l2_messages_tree_root, this, self.this_portal_address(), self.chain_id(), self.version(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "100": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse dep::protocol_types::constants::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "109": {
        "source": "use crate::hash::pedersen_hash;\nuse dep::protocol_types::constants::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "113": {
        "source": "use dep::protocol_types::constants::GENERATOR_INDEX__OUTER_NULLIFIER;\nuse crate::{\n    note::{\n        note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n    },\n    utils::arr_copy_slice,\n    hash::pedersen_hash,\n};\n\npub fn compute_inner_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note_with_header);\n\n    let input = [header.contract_address, inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(note_interface: NoteInterface<Note, N>, note_with_header: Note) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(note_interface: NoteInterface<Note, N>, note_header: NoteHeader, serialized_note: [Field; S]) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(serialized_note, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "115": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "116": {
        "source": "use dep::protocol_types::constants::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "122": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key_x = result[0];\n    let pub_key_y = result[1];\n    let partial_address = result[2];\n\n    let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n    assert(calculated_address == address);\n\n    Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "123": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "126": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "130": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "132": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse dep::protocol_types::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "133": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse dep::protocol_types::constants::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "138": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "149": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\nuse crate::types::address::AztecAddress;\n\nglobal AZTEC_ADDRESS_SERIALIZED_LEN: Field = 1;\n\nfn deserialize(fields: [Field; AZTEC_ADDRESS_SERIALIZED_LEN]) -> AztecAddress {\n    AztecAddress::new(fields[0])\n}\n\nfn serialize(value: AztecAddress) -> [Field; AZTEC_ADDRESS_SERIALIZED_LEN] {\n    [value.address]\n}\n\nglobal AztecAddressSerializationMethods = TypeSerializationInterface {\n    deserialize,\n    serialize,\n};\n",
        "path": "/aztec/types/type_serialization/aztec_address_serialization.nr"
      },
      "150": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "155": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(serialized_note: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(serialized_note)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "157": {
        "source": "struct SafeU120 {\n    value: u120,\n}\n\nimpl SafeU120 {\n    pub fn min() -> Self {\n        Self {\n            value: 0\n        }\n    }\n\n    pub fn max() -> Self {\n        Self {\n            value: 0xffffffffffffffffffffffffffffff\n        }\n    }\n\n    pub fn new(\n        value: Field,\n    ) -> Self {\n        // Check that it actually will fit. Spending a lot of constraints here :grimacing:\n        let bytes = value.to_be_bytes(32);\n        for i in 0..17 {\n            assert(bytes[i] == 0, \"Value too large for SafeU120\");\n        }\n        Self {\n            value: value as u120\n        }\n    }\n\n    pub fn is_zero(\n        self: Self,\n    ) -> bool {\n        self.value == 0\n    }\n\n    pub fn eq(\n        self: Self,\n        other: Self\n    ) -> bool {\n        self.value == other.value\n    }\n\n    pub fn lt(self: Self, other: Self) -> bool {\n        self.value < other.value\n    }\n\n    pub fn le(self: Self, other: Self) -> bool {\n        self.value <= other.value\n    }\n\n    pub fn gt(self: Self, other: Self) -> bool {\n        self.value > other.value\n    }\n\n    pub fn ge(self: Self, other: Self) -> bool {\n        self.value >= other.value\n    }\n\n    pub fn sub(\n      self: Self,\n      b: Self,\n    ) -> Self {\n        assert(self.value >= b.value, \"Underflow\");\n        Self {\n            value: self.value - b.value\n        }\n    }\n\n    pub fn add(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value + b.value;\n        assert(c >= self.value, \"Overflow\");\n        Self {\n            value: c\n        }\n    }\n\n    pub fn mul(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        let c: u120 = self.value * b.value;\n        if !b.is_zero() {\n            assert(c / b.value == self.value, \"Overflow\");\n        }\n        Self {\n            value: c\n        }\n    }\n\n    pub fn div(\n        self: Self,\n        b: Self,\n    ) -> Self {\n        assert(!b.is_zero(), \"Divide by zero\");\n        Self {\n            value: self.value / b.value\n        }\n    }\n\n    pub fn mul_div(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        self.mul(b).div(divisor)\n    }\n\n    pub fn mul_div_up(\n        self: Self,\n        b: Self,\n        divisor: Self\n    ) -> Self {\n        let c = self.mul(b);\n        assert(!divisor.is_zero(), \"Divide by zero\");\n        let adder = ((self.value * b.value % divisor.value) as u120 > 0) as u120;\n        c.div(divisor).add(Self {value: adder})\n    }\n\n    // todo: implement mul_div with 240 bit intermediate values.\n}\n\n#[test]\nfn test_init() {\n    let a = SafeU120::new(1);\n    assert(a.value == 1);\n}\n\n#[test]\nfn test_init_max() {\n    let a = SafeU120::max();\n    assert(a.value == 0xffffffffffffffffffffffffffffff);\n}\n\n#[test]\nfn test_init_min() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n}\n\n#[test]\nfn test_is_zero() {\n    let a = SafeU120::min();\n    assert(a.value == 0);\n    assert(a.is_zero() == true);\n}\n\n#[test]\nfn test_eq() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(1);\n    assert(a.eq(b));\n}\n\n#[test]\nfn test_lt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(a.lt(b));\n    assert(b.lt(a) == false);\n}\n\n#[test]\nfn test_le() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.le(b));\n    assert(a.le(c));\n    assert(c.le(a) == false);\n}\n\n#[test]\nfn test_gt() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    assert(b.gt(a));\n    assert(a.gt(b) == false);\n}\n\n#[test]\nfn test_ge() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(5);\n    assert(a.ge(b));\n    assert(a.ge(c) == false);\n    assert(c.ge(a));\n}\n\n#[test(should_fail)]\nfn test_init_too_large() {\n    let b = SafeU120::max().value as Field + 1; // max + 1\n    let _a = SafeU120::new(b);\n}\n\n#[test]\nfn test_add() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let c = SafeU120::add(a, b);\n    assert(c.value == 3);\n}\n\n#[test(should_fail)]\nfn test_add_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(1);\n    let _c = SafeU120::add(a, b);\n}\n\n#[test]\nfn test_sub() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(1);\n    let c = SafeU120::sub(a, b);\n    assert(c.value == 1);\n}\n\n#[test(should_fail)]\nfn test_sub_underflow() {\n    let a = SafeU120::new(1);\n    let b = SafeU120::new(2);\n    let _c = SafeU120::sub(a, b);\n}\n\n#[test]\nfn test_mul() {\n    let a = SafeU120::new(2);\n    let b = SafeU120::new(3);\n    let c = SafeU120::mul(a, b);\n    assert(c.value == 6);\n}\n\n#[test(should_fail)]\nfn test_mul_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let _c = SafeU120::mul(a, b);\n}\n\n#[test]\nfn test_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::div(a, b);\n    assert(c.value == 2);\n}\n\n#[test(should_fail)]\nfn test_div_by_zero() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(0);\n    let _c = SafeU120::div(a, b);\n}\n\n#[test]\nfn test_mul_div() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test(should_fail)]\nfn test_mul_div_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(4);\n    let _d = SafeU120::mul_div(a, b, c);\n}\n\n#[test]\nfn test_mul_div_up_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(5);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 4);\n}\n\n#[test]\nfn test_mul_div_up_non_rounding() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(2);\n    let d = SafeU120::mul_div_up(a, b, c);\n    assert(d.value == 9);\n}\n\n#[test(should_fail)]\nfn test_mul_div_up_ghost_overflow() {\n    let a = SafeU120::max();\n    let b = SafeU120::new(2);\n    let c = SafeU120::new(9);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n\n// It should not be possible for us to overflow `mul_div_up` through the adder, since that require the divisor to be 1\n// since we otherwise would not be at the max value. If divisor is 1, adder is 0.\n#[test(should_fail)]\nfn test_mul_div_up_zero_divisor() {\n    let a = SafeU120::new(6);\n    let b = SafeU120::new(3);\n    let c = SafeU120::new(0);\n    let _d = SafeU120::mul_div_up(a, b, c);\n}\n",
        "path": "/safe_math/safe_u120.nr"
      },
      "162": {
        "source": "use dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n  types::address::AztecAddress,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn shield(self: Self, context: &mut PrivateContext, from: Field, amount: Field, secret_hash: Field, nonce: Field) {\n    context.call_public_function(\n      self.address,\n      compute_selector(\"shield((Field),Field,Field,Field)\"),\n      [from, amount, secret_hash, nonce]\n    );\n  }\n\n  pub fn unshield(self: Self, context: &mut PrivateContext, from: Field, to: Field,  amount: Field, nonce: Field) {\n    context.call_private_function(\n      self.address,\n      compute_selector(\"unshield((Field),(Field),Field,Field)\"),\n      [from, to, amount, nonce]\n    );\n  }\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/interfaces.nr"
      },
      "164": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\nuse dep::safe_math::SafeU120;\n\nglobal SAFE_U120_SERIALIZED_LEN: Field = 1;\n\n// This is safe when reading from storage IF only correct safeu120 was written to storage\nfn deserializeU120(fields: [Field; SAFE_U120_SERIALIZED_LEN]) -> SafeU120 {\n    SafeU120 { value: fields[0] as u120 }\n}\n\nfn serializeU120(value: SafeU120) -> [Field; SAFE_U120_SERIALIZED_LEN] {\n    [value.value as Field]\n}\n\nglobal SafeU120SerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeU120,\n    serialize: serializeU120,\n};\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/types/safe_u120_serialization.nr"
      },
      "165": {
        "source": "use dep::aztec::types::address::{AztecAddress};\n\npub fn tokens_are_in_order(tokenA: AztecAddress, tokenB: AztecAddress) -> bool {\n    let a = tokenA.address.to_be_bytes(32);\n    let b = tokenB.address.to_be_bytes(32);\n    assert((a.len() == 32) & (b.len() == 32), \"addresses are not 32 bytes\");\n    let mut in_order = false;\n    for i in 0..32 {\n        if ((a[i] < b[i]) & (!in_order)) {\n            in_order = true;\n        }\n    }\n    in_order & (tokenA.address != tokenB.address)\n}\n",
        "path": "/home/olehmisar/projects/aztec/aztec-amm/src/contracts/amm/src/utils.nr"
      }
    }
  }
}